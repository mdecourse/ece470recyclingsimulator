<h1>About</h1>
<h4>五專部專題題目:</h4>
<h4 style="padding-left: 30px;"><span style="background-color: #ffff99;">網際內容管理系統在精密機械工程教學與研究上的應用</span></h4>
<h4 style="padding-left: 30px;">Application of Web-based Content Management Systems in Teaching and Research of Precision Mechanical Engineering</h4>
<h4 style="padding-left: 30px;">專題動機:</h4>
<p style="padding-left: 60px;">探討如何利用 <a href="https://www.fossil-scm.org">Fossil SCM</a> 虛擬與實體伺服器, 讓五專精密機械工程科相關師生, 得以透過學校配發的 @gm 帳號登入, 並在網際內容管理系統中進行知識管理與互動, 擬藉此提升課程教學與專題研究效益.</p>
<h4 style="padding-left: 30px;">研究步驟:</h4>
<p style="padding-left: 60px;">從 Windows 與 Ubuntu 中編譯 <a href="https://www.fossil-scm.org">Fossil SCM</a> 套件開始, 分別取得 client 與 server 端的可執行檔案後, 將 <a href="https://www.fossil-scm.org">Fossil SCM</a> 安裝配置在一台實體或虛擬主機上, 利用 Python + <a href="https://flask.palletsprojects.com/en/2.0.x/">Flask</a> 著手編寫 <a href="https://oauth.net/2/">Oauth2</a> 網際程式介面, 讓所有相關成員得以自建倉儲與網際內容管理系統, 之後再分門別類, 根據精密機械工程科學會的任務編組, 利用網際內容管理系統提供相關服務.</p>
<h4 style="padding-left: 30px;">預計成果:</h4>
<ol>
<li>參與 eng.nfu.edu.tw 網域伺服器 (DNS) 與 G Suite 系統管理.</li>
<li>在 Ubuntu 虛擬主機上, 完成以 <a href="https://www.fossil-scm.org">Fossil SCM</a> 架設 pj5073.eng.nfu.edu.tw 精密機械工程科學會網站.</li>
<li>能讓獲得許可之相關人員, 透過 @gm 帳號登入科學會網站, 在各班對應網站上進行 Github 上同步網際內容管理維護或互動討論.</li>
<li>專題報告 pdf 檔案, 能夠在 github.com/mdecourse/pj5073 倉儲中的 pdf 分支, 以 Github Actions 流程發布.</li>
<li>專題簡報可直接在 mde.tw/pj5073/reveal/ 中發布.</li>
</ol>
<h4 style="padding-left: 30px;">組員:</h4>
<p style="padding-left: 60px;">50733105</p>
<p style="padding-left: 60px;">50733144</p>
<p style="padding-left: 60px;">50733146</p>
<p style="padding-left: 60px;">50733152</p>
<h4>四技部專題題目:</h4>
<h4 style="padding-left: 30px;"><span style="background-color: #ffff99;">深度強化學習在行動機器人運動學上之應用</span></h4>
<h4 style="padding-left: 30px;">Application of Deep Reinforcement Learning in Kinematics of Mobile Robots</h4>
<h4 style="padding-left: 30px;">專題動機:</h4>
<p style="padding-left: 60px;">藉由研究 <a href="https://github.com/mdecourse/pj2022/tree/main/ece470_project">ECE470 專案</a>中行動機器人如何在 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 場景中, 利用 Python remote API, 以機器視覺輔助完成避障與取放特定物件的專案內容, 並在 <a href="https://arxiv.org/pdf/2101.05325.pdf">ref1</a> 與 <a href="https://github.com/robot-learning-freiburg/kinematic-feasibility-rl">ref2</a> 參考資料的引導下, 研究分析深度強化學習架構該如何在行動機器人運動學上進行應用.</p>
<h4 style="padding-left: 30px;">研究步驟:</h4>
<ol>
<li>將 <a href="https://github.com/mdecourse/pj2022/tree/main/ece470_project">ECE470 專案</a>內容分別配置於 Windows 與 Ubuntu 環境中, 重現 Python remote API 控制場景, 完成避障與取放特定物件任務.</li>
<li>延伸 Python remote API, 改用 <a href="https://www.coppeliarobotics.com/helpFiles/en/b0RemoteApiOverview.htm">B0-based remote API</a> 完成避障與取放特定物件任務.</li>
<li>延伸上述 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 控制場景, 在 Ubuntu 上以 <a href="https://www.coppeliarobotics.com/helpFiles/en/commandLine.htm">headless</a> 啟動, 並將場景影像以 <a href="https://flask.palletsprojects.com/en/2.0.x/">Flask</a> 串流至 client 端瀏覽器.</li>
<li>在 Ubuntu 實體與虛擬主機上建立 pj2022.kmol.info 主機, 設法編寫轉檔程式 (主要修改 init.py, config/config 檔案設定內容), 讓自架主機上的倉儲內容能夠同時支援近端 (同步內容推送至 Github, Gitlab, Bitbucket 與 Heroku) 與 <a href="https://uwsgi-docs.readthedocs.io/en/latest/">uwsgi</a> 伺服.</li>
<li>研究如何利用機器視覺與深度強化學習 (<a href="https://link.springer.com/book/10.1007/978-981-15-4095-0">ref1</a>, <a href="https://link.springer.com/book/10.1007/978-981-13-8285-7">ref2</a>, <a href="https://github.com/p-christ/Deep-Reinforcement-Learning-Algorithms-with-PyTorch">ref3</a>)提升避障與取放特定物件效能.</li>
</ol>
<h4 style="padding-left: 30px;">預計成果:</h4>
<ol>
<li>完成 pj2022.kmol.info 主機架設, 使用者可從瀏覽器登入行動機器人場景執行監控.</li>
<li>pj2022 專題網站內容可同步至 Github Pages, Gitlab Pages, 自架 <a href="https://www.fossil-scm.org">Fossil SCM</a> 主機與 Heroku 主機.</li>
<li>專題報告 pdf 檔案, 能夠在 github.com/mdecourse/pj2022 倉儲中的 pdf 分支, 以 Github Actions 流程發布.</li>
<li>專題報告內容能直接透過 Github Actions 套用 <a href="https://www.ieee.org/conferences/publishing/templates.html">IEEE 論文格式</a>進行 5-7 頁論文 Release 發布.</li>
<li>專題簡報可直接在 mde.tw/pj2022/reveal/ 中發布.</li>
</ol>
<h4 style="padding-left: 30px;">組員:</h4>
<p style="padding-left: 60px;">40823116</p>
<p style="padding-left: 60px;">40823131</p>
<p style="padding-left: 60px;">40823152</p>
<p style="padding-left: 60px;">40823153</p>
<hr/>
<h4>4072 專題:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/4072pj1">https://github.com/mdecourse/4072pj1</a> (<a href="http://mde.tw/4072pj1/reveal/">強化學習在機電系統中之應用</a>)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/4072pj2">https://github.com/mdecourse/4072pj2</a> (<a href="http://mde.tw/4072pj2/reveal/">有限元素分析套件解析應用</a>)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/4072pj3">https://github.com/mdecourse/4072pj3</a> (<a href="http://mde.tw/4072pj3/reveal/">Pyslvs-UI 平面多連桿機構套件之合成與應用</a>)</p>
<hr/>
<h4>工作站室虛擬主機:</h4>
<p style="padding-left: 30px;">nginx: sudo /etc/init.d/nginx restart</p>
<p style="padding-left: 30px;">uwsgi: sudo systemctl restart cmsimde</p>
<p style="padding-left: 30px;">fossil scm: sudo /etc/init.d/stunnel4 restart</p>
<h4>研究項目:</h4>
<ol>
<li>在實體或虛擬主機上配置 Ubuntu Desktop 操作系統, 並配置網際應用程式伺服器</li>
<li>能夠透過程式方法建立虛擬環境中的機電資整合系統</li>
<li>能夠透過網際與機器學習手段, 利用網路遠端監控虛擬整合機電資系統</li>
</ol>
<h4>具體工作項目:</h4>
<ol>
<li>利用虛擬主機安裝 Ubuntu Desktop 操作系統, 並在其中配置 cmstemplate 網際內容管理系統, RoboDK, CoppeliaSim, Webots 等系統</li>
<li>利用 Windows 10 上的 Xming, 遠端啟動 RoboDK, CoppeliaSim 與 Webots 等系統.</li>
<li>利用 Python remote API 操控網際應用程式伺服器上的 RoboDK, CoppeliaSim 與 Webots 機電整合場景</li>
<li>利用 Python 程式根據 RoKiSim Industrial Robot 定義 (XML +STL), 將所有 Robot 系統轉入 CoppeliaSim 與 Webots 執行 Forward and Inverse Kinematic 操作</li>
<li>利用機器視覺與學習方法在近端進行機械手臂自動化操作</li>
<li>利用網際架構監控虛實整合機電系統</li>
</ol>
<p>了解 <a href="/downloads/RoKiSim.7z">RoKiSim.7z</a> 中有關 CAD_Robots 目錄中有關 XML 與 STL 組成 Robot 的定義, 然後根據 <a href="/downloads/abbirm.simscene.xml.zip">abbirm.simscene.xml.zip</a> 中 CoppeliaSim XML 檔案格式, 以程式方法將所有 Robots 轉為 CoppeliaSim 場景中的 ttm 模型. 以執行 Forward and Inverse Knimatic 運動操作.</p>
<h2>網際內容管理</h2>
<p>能夠自己架設<span style="background-color: #ffff99;">網際內容管理系統</span>所需的軟硬體與網路配置後, 再加上遠端 Github 與近端 Fossil SCM 資料同步的分散式版次管理系統整合後, 想要從事哪一類的科技研究, 應該就沒有後顧之憂了, 而且各成員大多時間都能在網路上進行協同, 只有少部分時間必須配合硬體主機的實體維護與配置操作.</p>
<h4>假如將自行架設的主機以付費的主機代管或雲端主機服務取代, 則各成員皆可全時在網路上進行協同.</h4>
<h4>以下是與強化學習及碎片回復有關的參考資料:</h4>
<p style="padding-left: 30px;"><a href="/downloads/Reinforcement Learning - An Introduction.pdf">Reinforcement Learning - An Introduction.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Playing Atari with Deep Reinforcement Learning.pdf">Playing Atari with Deep Reinforcement Learning.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Reconstructing Shredded Documents.pdf">Reconstructing Shredded Documents.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Reconstruction of Shredded Paper Documents byFeature Matching.pdf">Reconstruction of Shredded Paper Documents byFeature Matching.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Faster_Reconstruction_of_Shredded_Text_Documents_via_Self-Supervised_Deep_Asymmetric_CVPR_2020_paper.pdf">Faster_Reconstruction_of_Shredded_Text_Documents_via_Self-Supervised_Deep_Asymmetric_CVPR_2020_paper.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Regenerate the Shredded Documents by using Memetic Algorithm.pdf">Regenerate the Shredded Documents by using Memetic Algorithm.pdf</a></p>
<h2>虛實整合</h2>
<p>透過網際內容管理主機上配置能與實體系統真實對應的模擬環境後, 使用者可以從多台裝置上的瀏覽器監控虛擬或實體機電資整合系統.</p>
<h4>所需技術:</h4>
<ol>
<li>網際內容管理主機上配置虛擬環境</li>
<li>該虛擬機電資整合環境可以透過製造流程成為實體系統</li>
<li>虛擬環境中的場景影像可以串流至使用者網路裝置上的瀏覽器或 APPs</li>
<li>使用者可以監控虛擬或實體機電資整合系統</li>
</ol>
<h2>機器學習</h2>
<ol>
<li>機器可以透過影像裝置取得外部物件座標系統</li>
<li>電腦可以透過該物件座標系統取放物件</li>
<li>機電資系統可以透過強化學習完成既定工作項目</li>
</ol>
<h1>AWCMS</h1>
<p>五專專題題目</p>
<h4>網際內容管理系統在精密機械工程教學與研究上的應用</h4>
<h4>Application of Web-based Content Management Systems in Teaching and Research of Precision Mechanical Engineering</h4>
<h4>工作任務:</h4>
<p style="padding-left: 30px;">學習如何在 Ubuntu 20.04 配置管理 <a href="https://www.fossil-scm.org">Fossil SCM</a></p>
<p style="padding-left: 30px;">設法導入五專科學會相關課程教學與專題製作流程上的應用</p>
<p style="padding-left: 60px;">每一位成員都能夠透過 @gm 帳號登入所配置的 <a href="https://www.fossil-scm.org">Fossil SCM</a> 論壇 (<a href="https://fossil-scm.org/forum/forummain">範例</a>) 進行討論</p>
<p style="padding-left: 60px;">每一位科學會成員都能將相關教學與專題製作流程內容納入 <a href="https://www.fossil-scm.org">Fossil SCM</a> 管理</p>
<p style="padding-left: 90px;">設法讓每一組專題都擁有一個線上專案系統, 可以透過網頁與版次管理系統呈現專題內容</p>
<p style="padding-left: 90px;">設法建立較學與研究資料配置與備份管理流程及系統</p>
<p style="padding-left: 60px;">設法吸引校友透過 Gmail 帳號登入五專科學會 <a href="https://www.fossil-scm.org">Fossil SCM</a> 網站, 提供教學研究與升學相關經驗與指導.</p>
<p style="padding-left: 60px;">設法配置 <a href="https://jitsi.org/">https://jitsi.org/</a> 與 <a href="https://obsproject.com/">OBS</a> 及 <a href="https://www.youtube.com/channel/UC4R8DWoMoI7CAwX8_LjQHig/all">Youtube 直播</a>結合, 建立校友線上 meeting 與互動系統.</p>
<p style="padding-left: 30px;"></p>
<p></p>
<h1>DRLKMR</h1>
<p>四技專題題目</p>
<h4><span style="background-color: #ffff99;">深度強化學習在行動機器人運動學上之應用</span></h4>
<h4>Application of Deep Reinforcement Learning in Kinematics of Mobile Robots (DRLKMR)</h4>
<h4>工作任務:</h4>
<h4 style="padding-left: 30px;">以 <a href="https://www.msys2.org/">MSYS2</a> 編譯 <a href="https://github.com/CoppeliaRobotics">CoppeliaSim</a>:</h4>
<p style="padding-left: 60px;">建立可編譯 <a href="https://github.com/CoppeliaRobotics">CoppeliaSim</a> 的可攜程式環境.</p>
<p style="padding-left: 60px;">倉儲: <a href="https://github.com/CoppeliaRobotics">https://github.com/CoppeliaRobotics</a> </p>
<p style="padding-left: 60px;">由於 CoppeliaSim 4.2.0 re6 將進行 lua 程式介接的改寫, 整體架構將會與先前的版本有很大差異.</p>
<p style="padding-left: 60px;">目前希望針對 CoppeliaSim 4.2.0 rev5 的版本執行編譯(<a href="https://github.com/CoppeliaRobotics/CoppeliaSimLib/releases/tag/coppeliasim-v4.2.0-rev5">核心程式庫倉儲</a>), 所採用的 Lua 為 5.3.5 版(可從 <a href="https://www.lua.org/ftp/">https://www.lua.org/ftp/</a> 下載). 至於從 <a href="https://riverbankcomputing.com/software/qscintilla/download">https://riverbankcomputing.com/software/qscintilla/download</a>, 可以發現 QScintilla gpl 版本僅釋出至 2.12.2, 因此只能採用 <a href="https://www.riverbankcomputing.com/static/Downloads/QScintilla/2.11.2/QScintilla_gpl-2.11.2.zip">QScintilla_gpl-2.11.2.zip</a>.</p>
<p style="padding-left: 60px;">先編譯 <a href="https://www.lua.org/">Lua</a>, 再編譯 <a href="https://riverbankcomputing.com/software/qscintilla/download">QScintilla_gpl-2.11.2</a>, 接著編譯 <a href="https://github.com/CoppeliaRobotics/CoppeliaSimLib">CoppeliaSimlib</a> 與 <a href="https://github.com/CoppeliaRobotics/coppeliaSimClientApplication">coppeliasimClientAppllication</a></p>
<p style="padding-left: 90px;">過程中需要 programming 目錄中的 <a href="https://github.com/CoppeliaRobotics/common">common</a>, <a href="https://github.com/CoppeliaRobotics/include">include</a> 與 <a href="https://github.com/CoppeliaRobotics/simMath">simMath</a></p>
<p style="padding-left: 90px;">取得 coppeliaSim.dll 與 coppeliaSim.exe 後再利用 <a href="https://github.com/lucasg/Dependencies">Dependencies</a> 複製所需 dll 後, 透過 <a href="https://www.msys2.org/">MSYS2</a> 安裝的 <a href="https://doc.qt.io/qt-5/qpa.html">Qt5 plugins platforms</a> 環境變數設定後啟動 CoppeliaSim.</p>
<p style="padding-left: 90px;"><a href="https://github.com/CoppeliaRobotics/CoppeliaSimLib/releases/tag/coppeliasim-v4.2.0-rev5">核心程式庫</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/CoppeliaRobotics/CoppeliaSimLib/releases/tag/coppeliasim-v4.2.0-rev5">ClientApplication</a></p>
<p style="padding-left: 90px;">從 4.2.0 rev5 下載安裝套件中取得 programming 目錄中的檔案內容, 其中最重要的是 system, platforms, models, scenes, lua, luar 等目錄.</p>
<p style="padding-left: 90px;">編譯完成 coppeliaSim.dll, coppeliaSim.exe 後, 配合 programming 目錄內容與所需的 dll 動態連結程式庫後, CoppeliaSim 已經可以開啟, 但是若要執行 Lua scripting, 還需要 <a href="https://github.com/CoppeliaRobotics/simExtGeom">simExtGeom</a>, 若要套用 Inverse Kinematics 則需要 <a href="https://github.com/CoppeliaRobotics/simExtIK">simExtIK</a>, 至於要開啟 Object 附屬的 Lua 程式編輯器, 則需要 <a href="https://github.com/CoppeliaRobotics/simExtCodeEditor">simExtCodeEditor</a>.</p>
<h4 style="padding-left: 60px;">取得結果:</h4>
<p style="padding-left: 90px;">可編譯執行 <a href="https://github.com/CoppeliaRobotics">CoppeliaSim</a> 的可攜程式環境</p>
<p style="padding-left: 90px;">自行編譯的 <a href="https://github.com/CoppeliaRobotics">CoppeliaSim</a> 4.2.0 rev5 程式套件</p>
<h4 style="padding-left: 30px;">利用 <a href="https://github.com/mdecourse/vrep-env">vrep-env</a> 完成冰球機在 Windows 環境的強化學習訓練</h4>
<hr/>
<p>Portable compiler in Windows 64-bit operating system. <a href="https://drive.google.com/file/d/1szBXUkv7q_UpcMvOtX4D5SOMuM1KMcgP/view?usp=sharing">compile_copsim.7z</a>, download file size 3.87 GB, uncompressed file size 14 GB)</p>
<p>有關 V-rep 3.1.2 的 <a href="http://mde.tw/cad2021/content/Lua%20and%20CPP.html">Lua 與 C++ 編譯練習</a>.</p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;">Robotic Systems: <a href="https://motion.cs.illinois.edu/RoboticSystems/">https://motion.cs.illinois.edu/RoboticSystems/</a></p>
<p style="padding-left: 30px;"><a href="https://dtransposed.github.io/blog/2020/10/21/Robotic-Assembly/">Robotic assembly using Deep Reinforcement Learning</a></p>
<p style="padding-left: 30px;"><a href="/get_page/DRLKMR/Deep Reinforcement Learning Fundamentals, Research and Applications">An Introduction to Deep Reinforcement Learning</a> (140頁電子書)</p>
<p style="padding-left: 30px;"><a href="/get_page/DRLKMR/Deep Reinforcement Learning Fundamentals, Research and Applications">Tutorial: Deep Reinforcement Learning</a> (66 頁簡報)</p>
<p style="padding-left: 30px;"><a href="/get_page/DRLKMR/Deep Reinforcement Learning Fundamentals, Research and Applications">Intro to Deep Reinforcement Learning</a></p>
<p style="padding-left: 30px;"><a href="https://www.hou.usra.edu/meetings/isairas2020fullpapers/pdf/5032.pdf">Deep Reinforcement Learning Fundamentals, Research and Applications</a></p>
<p style="padding-left: 30px;"><a href="/get_page/DRLKMR/Deep Reinforcement Learning Fundamentals, Research and Applications">Playing Atari with Deep Reinforcement Learning</a></p>
<p style="padding-left: 30px;"><a href="https://deepreinforcementlearningbook.org/docs/Chap%2016.%20Robot%20Learning%20in%20Simulation/">Deep Reinforcement Learning</a> (只有章節標題與程式碼)</p>
<p style="padding-left: 60px;"><a href="https://github.com/deep-reinforcement-learning-book/Chapter16-Robot-Learning-in-Simulation">https://github.com/deep-reinforcement-learning-book/Chapter16-Robot-Learning-in-Simulation</a></p>
<p style="padding-left: 30px;"><a href="https://medium.datadriveninvestor.com/elixir-e-reinforcement-learning-i-3ecd9399d03c">利用 Elixir 建立自駕車 DRL</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/marceloreichert/pwt-autonomous-car-medium">https://github.com/marceloreichert/pwt-autonomous-car-medium</a></p><h2>研究方向</h2>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="/downloads/2013_Techniques for Robot Navigation in Dynamic Real-World Environments.pdf">2013_Techniques for Robot Navigation in Dynamic Real-World Environments.pdf</a></p>
<p style="padding-left: 30px;">論文簡介時就直接列出科學上的貢獻, 已經出版的內容, 所釋出的軟體以及協同相關事項.</p>
<p style="padding-left: 60px;">1 Introduction<br/>1.1 Scientific Contributions<br/>1.2 Publications<br/>1.3 Software Releases<br/>1.4 Collaborations<br/>1.5 Notation<br/>1.6 Outline</p>
<p style="padding-left: 30px;"><a href="/downloads/2021_Sample-efficient Reinforcement Learning in Robotic Table Tennis.pdf">2021_Sample-efficient Reinforcement Learning in Robotic Table Tennis.pdf</a></p>
<h2>建立可攜系統</h2>
<p><a href="https://drive.google.com/file/d/1RcTirRKBe3Zc0LZ5GlZ1v8UHUBjrXRS9/view?usp=sharing">Python 3.9.5</a> (下載 203MB, 解開壓縮 880MB) - 主要執行 Leo Editor 進行程式開發.</p>
<p><a href="https://drive.google.com/file/d/1ZGRlP-scG7AD5OX7F-5NRQKKuA9Ni4Cn/view?usp=sharing">Portablegit 2.31.1</a> (下載 58MB, 解開壓縮 272MB) - Git 工具.</p>
<p><a href="https://drive.google.com/file/d/1APTKgWxWHFCMm-skMs5VuXJbnn4-tx-M/view?usp=sharing">SciTE 5.0.2</a> (下載 1.3MB, 解開壓縮 4.3MB) - 編輯並執行 Python, TinyC, Lua 等程式.</p>
<p><a href="https://drive.google.com/file/d/1dJ0cPzKSkydVN6Q5GLXN4R-oJxW1iil2/view?usp=sharing">Lua5.4.3</a> (下載 635KB, 解開壓縮 2.85MB) - Lua 解譯系統.</p>
<p><a href="https://drive.google.com/file/d/11ohtBeEK0rjCzoWxAjzO_Gh4t7Y4FnA6/view?usp=sharing">MSYS2 20210419</a> (下載 3.33GB, 解開壓縮 12GB) - 用於編譯 Qt5 C++ 程式碼.</p>
<p><a href="https://drive.google.com/file/d/1k3e80b0oSTesRXeW5KJB8lVImPm2m_ly/view?usp=sharing">Boost 1.76.0</a> (下載 93MB, 解開壓縮 680MB) - C++ 程式庫.</p>
<p><a href="https://drive.google.com/file/d/17bxQVNJrKdO05nuyTXYXdn5Efdsn9fsq/view?usp=sharing">cmake 3.10.1</a> (下載 10.7MB, 解開壓縮 61MB) - build C++ 程式套件.</p>
<p><a href="https://drive.google.com/file/d/11_OOXmEpEKMzGv4nxYAy332HtGzRZssi/view?usp=sharing">Qscintilla 2.11.2</a> (下載 3.7MB, 解開壓縮 32.8MB) - editor control 程式庫.</p>
<p><a href="https://drive.google.com/file/d/1KKfRgkq1wAIpe-NhxP0t7lz9eGb3vIfG/view?usp=sharing">eigen 3.3.8</a> (下載 1.4MB, 解開壓縮 11.5MB) - eigenvalue 運算程式庫.</p>
<p><a href="https://drive.google.com/file/d/1aoyWG8rzCCgF5oyEED82ChLNCefuuIa_/view?usp=sharing">Dependencies</a> (下載 2.7MB, 解開壓縮 12.4MB) - 查詢 exe 與 dll 檔案執行相依程式庫.</p>
<p><a href="https://drive.google.com/file/d/1FUIXqDmcmuyKRq6iJCPkPKpJWk_xQhtd/view?usp=sharing">start and stop batch</a> - 啟動關閉與設定檔案.</p>
<h2>下載可攜系統</h2>
<p><a href="https://drive.google.com/file/d/1FUIXqDmcmuyKRq6iJCPkPKpJWk_xQhtd/view?usp=sharing">start and stop batch</a> - 啟動關閉與設定檔案.</p>
<h3>Legacy Console Mode</h3>
<p>Old commands never die, they just fade away.</p>
<p>這裡所使用的 Batch file start_iv6.bat 與 stop.bat 只能在 <a href="https://docs.microsoft.com/en-us/windows/console/legacymode">https://docs.microsoft.com/en-us/windows/console/legacymode</a> 中使用. 之後應該要設法透過可攜且跨平台的 <a href="https://github.com/PowerShell/PowerShell">https://github.com/PowerShell/PowerShell</a>  編寫能夠直接從外接 USB 啟動可攜系統的啟動 scripts.</p>
<p style="padding-left: 30px;">有關 PowerShell:</p>
<p style="padding-left: 60px;"><a href="https://docs.microsoft.com/zh-tw/powershell/">https://docs.microsoft.com/zh-tw/powershell/</a></p>
<p style="padding-left: 60px;"><a href="https://leanpub.com/powershell101">https://leanpub.com/powershell101</a></p>
<h4>MSYS2 版本的選擇</h4>
<p>MSYS2 各 release 版本可以從 <a href="https://github.com/msys2/msys2-installer/releases">https://github.com/msys2/msys2-installer/releases</a> 下載. 在此使用 20210419 的版本. 主要原因是 20210604 與 20210725 釋出的版本與 20210419 有很大差異, 最大的問題在於目前只有 20210419 的版本能夠順利 build <a href="https://github.com/zeromq/libzmq">https://github.com/zeromq/libzmq</a>, 而 libzmq 是 CoppeliaSim BlueZero 延伸套件的核心程式庫. 所以選用 20210419 的 MSYS2 的版本.</p>
<p>理論上 MSYS2 安裝在 Windows 10 之後再取出目錄資料放入 C:\tmp\summer\data 目錄後, 必須要透過</p>
<p>pacman -Syu 與 pacman -Sy 更新內容, 但是在這裡只需要從<a href="http://mde.tw/cmstemplate/content/%E5%8F%AF%E6%94%9C%E7%B3%BB%E7%B5%B1.html">可攜系統頁面</a>下載 clean 的 MSYS2 檔案即可.</p>
<h4>此一可攜系統的規劃如下:</h4>
<p style="padding-left: 30px;">Python 使用 Windows 10 版本</p>
<p style="padding-left: 60px;">操作步驟是在 Windows 安裝 Python 3.9.6 版之後, 再將 Python396 內容取出, 但是安裝時選擇不安裝 pip, 因為 pip.exe 會將安裝路徑直接寫入, 因此必須在安裝 pip 之外的內容後, 設定好隨身系統的 Python 啟動路徑後, 再以命令列 python <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;ved=2ahUKEwjjjKm-vpvyAhWBIaYKHbSTASAQFnoECAIQAQ&amp;url=https%3A%2F%2Fbootstrap.pypa.io%2Fget-pip.py&amp;usg=AOvVaw0zKVO_zW0nkF7s0zdjWFNj">get-pip.py</a> 安裝 pip.exe, 如此才能直接在可攜系統中正確利用 pip install 安裝套件.</p>
<p style="padding-left: 30px;">Lua 使用 Windows 版本</p>
<p style="padding-left: 60px;">Lua 原始碼對於 CoppeliaSim 或 Webots 的編譯非常重要, 因為 Lua 原始碼系統非常簡潔, 可以與 C/C++ 結合, 使用者只要編譯一次 C/C++ 程式碼並轉為動態連結程式庫後, 就可以利用 Lua 解譯程式對模擬系統進行調控.</p>
<p style="padding-left: 60px;">CoppeliaSim 4.2.0 版所採用的 Lua 為 5.3.5 (可以從<a href="https://www.lua.org/ftp/">這裡</a>下載原始碼) 與之前的 5.2 或 V-rep 時代的 Lua 5.1 版有些許出入, 因此過去場景所編寫的 Lua scripts, 可能必須經過修改才能夠在 CoppeliaSim 4.2.0 中執行.</p>
<p style="padding-left: 60px;">利用配置好的 MSYS2 編譯 Lua 5.3.5, 可以進入 w32 目錄後執行 mingw32-make mingw.</p>
<p style="padding-left: 30px;">Git 使用 Windows 版本</p>
<p style="padding-left: 60px;">Portablegit 可以從<a href="https://git-scm.com/downloads">這裡</a>下載.</p>
<p style="padding-left: 60px;">假如存放至 Github 的檔案超過 45 MB, 建議利用 <a href="https://git-lfs.github.com/">https://git-lfs.github.com/</a> 進行配置設定, 解開 git-lfs.exe 後放入 Portablegit bin 目錄中與 git.exe 一起, 就可以直接在可攜系統中使用 git lfs 執行安裝與配置設定.</p>
<p style="padding-left: 30px;">SciTE 使用 Windows 版本</p>
<p style="padding-left: 60px;">SciTE 可以從<a href="https://www.scintilla.org/SciTEDownload.html">這裡</a>下載. 也可以下載原始碼自行利用可攜系統進行編譯.</p>
<p style="padding-left: 30px;">CMake 使用 Windows 10 版本</p>
<p style="padding-left: 60px;">Windows 10 版的 CMake 可以從這裡<a href="https://cmake.org/download/">下載</a>. 只要將 cmake.exe 路徑加入 path 搜尋就可以使用.</p>
<p style="padding-left: 30px;">gcc 使用 MinGW64 版本</p>
<p style="padding-left: 60px;">前面已經提過, 目前使用 <a href="https://github.com/msys2/msys2-installer/releases/tag/2021-04-19">20210419 的版本</a>, 與 Python 的方法相同, 必須先在 Windows 系統安裝後, 取出對應目錄內容, 放入 data 目錄後, 再將操作系統所安裝的版本移除.</p>
<p style="padding-left: 60px;">MSYS2 配置完成後, 必須以 pacman -S mingw-w64-x86_64-toolchain 安裝 gcc MinGW64 版後, 才可用來編譯 C/C++ 程式.</p>
<p style="padding-left: 30px;">boost 使用 MinGW64 版本</p>
<p style="padding-left: 60px;">以 pacman -S mingw-w64-x86_64-boost 安裝後續編譯 CoppeliaSim 所需的 <a href="https://www.boost.org/">Boost C++ 程式庫</a>.</p>
<p style="padding-left: 30px;">Qt5 使用 MinGW 版本</p>
<p style="padding-left: 60px;">以 pacman -Sy mingw-w64-x86_64-qt5  安裝 Qt5, 可用於編譯 CoppeliaSim 與 Webots.</p>
<p style="padding-left: 60px;">以 pacman -Sy mingw-w64-x86_64-ffmpeg 安裝 ffmpeg, 後續可用於強化學習流程動畫製作.</p>
<p style="padding-left: 60px;">其他相關套件安裝:</p>
<p style="padding-left: 90px;">pacman -S mingw-w64-x86_64-gnutls, <a href="https://www.gnutls.org/">https://www.gnutls.org/</a></p>
<p style="padding-left: 90px;">pacman -S mingw-w64-x86_64-libsodium, <a href="https://doc.libsodium.org/">https://doc.libsodium.org/</a></p>
<p style="padding-left: 90px;">pacman -Sy mingw-w64-x86_64-doxygen, <a href="https://www.doxygen.nl">https://www.doxygen.nl</a></p>
<p style="padding-left: 30px;">cmsimde 所需模組安裝:</p>
<p style="padding-left: 60px;">pip install pyopenssl flask flask_cors bs4 lxml pelican markdown leo</p>
<p>start_ipv6.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
start subst %Disk%: "data"

%Disk%:

set HomePath=%Disk%:\home_ipv6
set HomeDrive=%Disk%:\home_ipv6
set Home=%Disk%:\home_ipv6
set USERPROFILE=%Disk%:\home_ipv6

REM set Python io encoding as utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Disk%:\Python396\DLLs;%Disk%:\Python396\Lib;^
%Disk%:\Python396\Lib\site-packages;

set PYTHONHOME=%Disk%:\Python396

REM for putty
set GIT_SSH=%Disk%:\putty\plink.exe

REM for Java and Android SDK
set java_home=%Disk%:\java\jdk8u222-b10
set ANDROID_SDK_home=%Disk%:\home_ipv6
set GRADLE_USER_home=%Disk%:\home_ipv6
set ANDROID_SDK_ROOT=%Disk%:\android\sdk
set ANDROID_Home=%Disk%:\android\sdk
set REPO_OS_OVERRIDE=windows

REM set Python related path
set path_python=%Disk%:\Python396;%Disk%:\Python396\Scripts;
REM set git related path
set path_git=%Disk%:\portablegit_2.31.1\bin;
REM set for msys2 64 byte system
set path_msys2=%Disk%:\msys64_20210419\mingw64\bin;
REM set for LaTeX
set path_miketex=%Disk%:\miktex-portable\texmfs\install\miktex\bin\x64;
REM Flutter path
set path_flutter=%Disk%:\flutter\bin;%java_home%\bin;%Disk%:\Android\sdk;^
%Disk%:\Android\sdk\tools;%Disk%:\Android\sdk\tools\bin;^
%Disk%:\Android\sdk\emulator;%Disk%:\Android\sdk\platform-tools;^
%Disk%:\flutter\bin\cache\dart-sdk\bin;%Disk%:\vscode;

set path_node=%Disk%:\node-v14.15.4-win-x64;
set path_tcc=%Disk%:\tmp\tcc\win32;
rem set path_tcc=%Disk%:\tcc;
set path_heroku=%Disk%:\heroku\bin;
set path_postgresql=%Disk%:\postgresql13\bin;
set path_range=%Disk%:\Range3_official\bin;
rem set path_range=%Disk%:\range-3.2.5_kmol\bin;
set path_lua=%Disk%:\lua-5.3.5\;
set path_core=%Disk%:\coreutils-5.3.0\bin;
REM for gogs
set path_putty=%Disk%:\putty;
set path_vscode=%Disk%:\vscode;

REM for Rust
set MINGW_PATH=%path_msys2%;
set GIT_PATH=%path_git%;
set VSCODE_PATH=%path_vscode%
set RUSTUP_HOME=%Disk%:\Rust\rust
set CARGO_HOME=%Disk%:\Rust\cargo
set RUST_PATH=%CARGO_HOME%\bin

REM for Erlang and Elixir
set path_erlang=%Disk%:\elixir\erl10.7\bin\;^
%Disk%:\elixir\erl10.7\erts-10.7\bin;^
%Disk%:\elixir\elixir\bin;

set ERTSPATH=%Disk%:\elixir\erl10.7\erts-10.7\bin
set ERLINI=%Disk%:\elixir\erl10.7\erts-10.7\bin\erl.ini

REM for Haskell
set path_haskell=%Disk%:\ghc-9.0.1-x86_64-unknown-mingw32\bin;
REM for node.js
set path_nodejs=%Disk%:\node-v14.17.2-x64\nodejs;^
%Disk%:\node-v14.17.2-x64\nodejs\node_modules\npm;

REM add PostgreSQL related path

@SET PGDATA=%Disk%:\postgresql13\data
@SET PGDATABASE=postgres
@SET PGUSER=postgres
@SET PGPORT=5432
@SET PGLOCALEDIR=%Disk%:\postgresql13\share\locale

REM set for Range3
REM REG IMPORT %Disk%:\range3.reg

REM proxy needed for heroku login
REM proxy can not use with fossil scm
REM proxy can not use with Rust installation
REM needed for node.js
REM set HTTP_PROXY=http://account:password@[IPV6address or domain name]:3128
REM set HTTPS_PROXY=http://account:password@[IPV6address or domain name]:3128

REM for PyRep
set VREP_PATH=%Disk%:\CoppeliaSimEdu_4.1.0_rev1

REM BOOST_ROOT for compiling coppeliasim but maybe not for linking
REM set BOOST_ROOT=%Disk%:\boost_1_76_0\;
set path_copsim=%Disk%:\cmake-3.21.1-windows-x86_64\bin;^
%Disk%:\diffutils-2.8.7-1\bin;%Disk%:\patch-2.5.9-7\bin;^
%Disk%:\jom_1_1_2;%Disk%:\LLVM\bin;%Disk%:\QtCreator\bin;^
%Disk%:\CoppeliaSimEdu;%Disk%:\Python396\tcl\tcl8.6;

REM set QT_QPA_PLATFORM_PLUGIN_PATH=Y:\msys64_20210419\mingw64\share\qt5\plugins\platforms
REM set QT_PLUGIN_PATH=Y:\msys64_20210419\mingw64\share\qt5\plugins

REM for execute scite directly
set path_scite=%Disk%:\wScite511\;

REM for simExtZMQ
set path_xsltproc=%Disk%:\xsltproc;
REM for simExtOMPL
set path_sed=%Disk%:\portablegit_2.31.1\usr\bin;
REM for vs code
set path_code=%Disk%:\VSCode-win32-x64-1.58.2;

path=%Disk%:;%path_python%;%path_git%;%path_copsim%;^
%path_msys2%;%path_miketex%;%path_flutter%;%path_node%;^
%path_tcc%;%path_heroku%;%path_postgresql%;%path_range%;^
%path_lua%;%path_core%;%path_putty%;%path_vscode%;^
%RUST_PATH%;%path_erlang%;%path_nodejs%;%path_haskell%;^
%path_scite%;%path_xsltproc%;%path_sed%;%path_code%;%path%;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wScite511\SciTE.exe
start /MIN %Disk%:\wScite511\SciTE.exe

Exit
</pre>
<p>stop.bat</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
path=%PATH%;

start taskkill /IM python.exe /F
start taskkill /IM pythonw.exe /F
REM stop Flutter and BlueStacks connection
start taskkill /IM adb.exe /F
start taskkill /IM scite.exe /F
REM stop Range3
start taskkill /IM range.exe /F

REM stop data directory and y: substitution
start subst %Disk%: /D
REM stope cmd windows
start taskkill /IM cmd.exe /F

EXIT
</pre>
<p></p>
<h3>PowerShell</h3>
<h4>取得 USB 磁碟代號:</h4>
<p style="padding-left: 30px;">指令: volume</p>
<p style="padding-left: 30px;">volume | ? drivetype -eq removable | % driveletter</p>
<h4>以磁碟代號對應特定目錄:</h4>
<p style="padding-left: 30px;">指令: <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/new-psdrive">New-PSDrive</a></p>
<p style="padding-left: 30px;">New-PSDrive -Name y -PSProvider FileSystem -Root c:\tmp\portable\data</p>
<p><a href="https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/ssh-remoting-in-powershell-core">SSH remoting</a></p>
<h4>插入 USB 隨身碟後自動執行 PowserShell script:</h4>
<p style="padding-left: 30px;"><a href="https://stackoverflow.com/questions/21805166/start-powershell-script-when-usb-drive-is-inserted/21806438">https://stackoverflow.com/questions/21805166/start-powershell-script-when-usb-drive-is-inserted/21806438</a></p>
<h4>Dismount USB drive:</h4>
<p style="padding-left: 30px;"><a href="https://serverfault.com/questions/130887/dismount-usb-external-drive-using-powershell">https://serverfault.com/questions/130887/dismount-usb-external-drive-using-powershell</a></p>
<p><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/start-process">Start-Process</a></p>
<p style="padding-left: 30px;">開啟命令列視窗 (<a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands">Windows command shell</a> 指令列表)</p>
<p style="padding-left: 30px;">Start-Process "cmd"</p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/sushihangover/SushiHangover-PowerShell">https://github.com/sushihangover/SushiHangover-PowerShell</a></p>
<p style="padding-left: 30px;"><a href="https://superuser.com/questions/219401/starting-scheduled-task-by-detecting-connection-of-usb-device">https://superuser.com/questions/219401/starting-scheduled-task-by-detecting-connection-of-usb-device</a></p>
<p>以下可攜系統主要用於 <a href="https://github.com/CoppeliaRobotics">CoppeliaSim</a> 編譯用, <a href="https://github.com/CoppeliaRobotics">Boost C++</a> 程式庫以 <a href="https://github.com/CoppeliaRobotics">MSYS2</a> 為主.</p>
<p><a href="https://github.com/CoppeliaRobotics">CoppeliaSim</a> 原始碼: <a href="https://github.com/CoppeliaRobotics">https://github.com/CoppeliaRobotics</a></p>
<h4>下載可攜程式系統:</h4>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1hEGgONw8ahNs7JPAKOurc7JvGfhgO2zY/view?usp=sharing">compile_copsim_for_pj2022.7z</a> (download file size 4 GB, uncompressed file size 14 GB)</p>
<h1>pj2022</h1>
<p><a href="http://mally.stanford.edu/~sr/computing/basic-unix.html">http://mally.stanford.edu/~sr/computing/basic-unix.html</a></p>
<p>這台主機是採用 Ubuntu 20.04 Desktop 最小安裝後, 配置 CMSiMDE 動態網站在 uwsgi + nginx 的 https www server 的環境中啟動, 而靜態網頁則直接配置於 http nginx server.</p>
<p>之後為了讓使用者可以遠端 ssh 至主機, 另外安裝 openssh-server.</p>
<p>Fossil SCM 則透過 stunnel 提供的 https 進行 port 5443 的 serving. 但目前上述動態與靜態 CMSiMDE 並未與近端 Fossil SCM 及遠端 Github 倉儲進行同步整合.</p>
<p>由於這台主機具備桌面系統, 因此使用者可以透過 <a href="https://sourceforge.net/projects/xming/">https://sourceforge.net/projects/xming/</a> 以 X-windows 取得在server 執行的程式畫面, 其中包括 <a href="https://robodk.com/">RoboDK</a> 與 <a href="https://www.coppeliarobotics.com">CoppeliaSim</a>.</p>
<p>上述配置可以搭配:</p>
<p style="padding-left: 30px;"><a href="https://ctmakro.github.io/site/on_learning/rl/vrep.html">https://ctmakro.github.io/site/on_learning/rl/vrep.html</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/pytorch/robotic-assembly-using-deep-reinforcement-learning-dfd9916c5ad7">https://medium.com/pytorch/robotic-assembly-using-deep-reinforcement-learning-dfd9916c5ad7</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/stepjam/PyRep">https://github.com/stepjam/PyRep</a></p>
<p>進行機電整合系統的機器學習研究.</p>
<p>Change init.py title to "Pj5073", need to use "sudo systemctl restart cmsimde" to make it work.</p>
<h2>upgrade</h2>
<p>sudo apt update</p>
<p>sudo apt upgrade</p>
<p>sudo apt dist-upgrade</p>
<p>sudo do-release-upgrade</p>
<p>/etc/update-manager/release-upgrades file</p>
<p>Prompt=lts or normal</p>
<p>因為 Range3 無法在 Ubuntu 20.04 項下的 libqt5core5a 程式庫版本中執行 5.12, 必須升級為 Ubuntu 21.04 才可以安裝 5.15 以上的 libqt5core5a.</p>
<p>2021.05.16 16:59 正在升級為 Ubuntu 21.04 過程中.</p>
<h1>強化學習</h1>
<h4>Pytorch:</h4>
<p style="padding-left: 30px;"><a href="/downloads/Pytorch_Tutorial.pdf">Pytorch Tutorial.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Pytorch_Tutorial_1.pdf">Pytorch_Tutorial_1.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Introduction_to_DL_with_PyTorch.pdf">Introduction_to_DL_with_PyTorch.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/PyTorch- An Imperative Style High-PerformanceDeep Learning Library.pdf">PyTorch- An Imperative Style High-PerformanceDeep Learning Library.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://pytorch.org/assets/deep-learning/Deep-Learning-with-PyTorch.pdf">Deep Learning with Pytorch.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-4258-2">Pytorch Recipes</a> (校園網路中下載)</p>
<p style="padding-left: 30px;"><a href="https://github.com/thu-ml/tianshou">https://github.com/thu-ml/tianshou</a> (天授 Pytorch Deep Reinforcement Learning Library)</p>
<h4>Reinforcement Learning:</h4>
<p style="padding-left: 30px;"><a href="/downloads/Reinforce Learning - An Introduction.pdf">Reinforce Learning - An Introduction.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/A Reinforcement Learning Approach to View Planning forAutomated Inspection Tasks.pdf">A Reinforcement Learning Approach to View Planning forAutomated Inspection Tasks.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/jhu-lcsr/good_robot">https://github.com/jhu-lcsr/good_robot</a> (Efficient Reinforcement Learning for Multi-Step Visual Tasks with Sim to Real Transfer)</p>
<h4>Deep Reinforcement Learning</h4>
<p style="padding-left: 30px;"><a href="/downloads/Introduction to Deep Reinforcement Learning0.pdf">Introduction to Deep Reinforcement Learning0.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Tutorial of Deep Reinforcement Learning.pdf">Tutorial of Deep Reinforcement Learning.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/An Introduction to Deep Reinforcement Learning.pdf">An Introduction to Deep Reinforcement Learning.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/An Introduction To Deep Reinforcement Learning2.pdf">An Introduction To Deep Reinforcement Learning2.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/An Introduction to Deep Reinforcement Learning3.pdf">An Introduction to Deep Reinforcement Learning3.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Deep Reinforcement Learning with InteractiveFeedback in a Human–Robot Environment.pdf">Deep Reinforcement Learning with InteractiveFeedback in a Human–Robot Environment.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/A Collision Avoidance Method Based on DeepReinforcement Learning.pdf">A Collision Avoidance Method Based on DeepReinforcement Learning.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Experimental investigations of a highlymaneuverable mobile omniwheel robot.pdf">Experimental investigations of a highlymaneuverable mobile omniwheel robot.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://ieeexplore.ieee.org/document/7989385">Deep reinforcement learning for robotic manipulation with asynchronous off-policy updates</a> (在校園網路中下載)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-981-15-4095-0">Deep Reinforcement Learning</a> (校園網路中下載)</p>
<p style="padding-left: 60px;"><a href="https://github.com/deep-reinforcement-learning-book">https://github.com/deep-reinforcement-learning-book</a></p>
<h4>Pyrep:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/stepjam/PyRep">https://github.com/stepjam/PyRep</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/deep-reinforcement-learning-book/Chapter16-Robot-Learning-in-Simulation">https://github.com/deep-reinforcement-learning-book/Chapter16-Robot-Learning-in-Simulation</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/chauby/V-REP-YouBot-Demo">https://github.com/chauby/V-REP-YouBot-Demo</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/Souphis/gym-vrep">https://github.com/Souphis/gym-vrep</a></p>
<h4>A Big CAD model dataset:</h4>
<p style="padding-left: 30px;"><a href="https://archive.nyu.edu/handle/2451/43778">https://archive.nyu.edu/handle/2451/43778</a></p>
<h1>相關技術</h1>
<p><a href="http://kinematic-rl.cs.uni-freiburg.de/">Learning Kinematic Feasibility through Reinforcement Learning</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Learning Kinematic Feasibility for MobileManipulation through Deep Reinforcement Learning.pdf">Learning Kinematic Feasibility for MobileManipulation through Deep Reinforcement Learning.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/robot-learning-freiburg/kinematic-feasibility-rl">https://github.com/robot-learning-freiburg/kinematic-feasibility-rl</a></p>
<p style="padding-left: 30px;"><a href="https://rl.uni-freiburg.de/demos-datasets-software">https://rl.uni-freiburg.de/demos-datasets-software</a></p>
<p>Fundamentals of Manipulator Calibration: <a href="https://core.ac.uk/download/pdf/36732657.pdf">https://core.ac.uk/download/pdf/36732657.pdf</a></p>
<h2>X Window</h2>
<p>在 Windows 10 中可以使用 <a href="https://sourceforge.net/projects/xming/">Xming </a>X server. 其目的在讓遠端的伺服器執行 GUI 程式時, 能將圖型介面傳送至 X server.</p>
<p>利用 <a href="https://sourceforge.net/projects/xming/">Xming </a>帶出 pj5073.kmol.info 上所執行的程式 GUI 畫面流程:</p>
<ol>
<li>設定以 putty.exe 對 pj5073.kmol.info ssh 連線</li>
<li>連線 session 之 SSH -&gt; Auth -&gt;X11 勾選 enable X11 Forwarding, 並將 X Display location 設為 localhost:0.0, 表示要將程式執行的畫面傳回 X server.</li>
<li>ssh <a href="mailto:user_account@pj5073.kmol.info">user_account@pj5073.kmol.info</a> 連線後, 以 xterm&amp; 背景執行 xterm.</li>
<li>接著以 nautilus&amp; 背景執行 Ubuntu 的 GUI 檔案瀏覽器.</li>
</ol>
<h2>RoboDK</h2>
<h4>Windows 64 位元:</h4>
<p style="padding-left: 30px;"><a href="https://robodk.com/downloads/Install-RoboDK-64-v5.2.3.exe">https://robodk.com/downloads/Install-RoboDK-64-v5.2.3.exe</a></p>
<h4>Mac 64 位元:</h4>
<p style="padding-left: 30px;"><a href="https://robodk.com/downloads/Install-RoboDK.dmg">https://robodk.com/downloads/Install-RoboDK.dmg</a></p>
<h4>Ubuntu 64 位元:</h4>
<p style="padding-left: 30px;"><a href="https://robodk.com/downloads/Install-RoboDK.tar.gz">https://robodk.com/downloads/Install-RoboDK.tar.gz</a></p>
<h4>Raspberry Pi:</h4>
<p style="padding-left: 30px;"><a href="https://robodk.com/downloads/Install-RoboDK-Pi.tar.gz">https://robodk.com/downloads/Install-RoboDK-Pi.tar.gz</a></p>
<h4>Android:</h4>
<p style="padding-left: 30px;"><a href="https://play.google.com/store/apps/details?id=org.robodk.app.sharex">https://play.google.com/store/apps/details?id=org.robodk.app.sharex</a></p>
<h4>iPhone:</h4>
<p style="padding-left: 30px;"><a href="https://apps.apple.com/lc/app/robodk/id1485169308">https://apps.apple.com/lc/app/robodk/id1485169308</a></p>
<h3>RoboDK API</h3>
<h4>get CWD:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os

# Get the current working directory

CWD = os.path.dirname(os.path.realpath(__file__))</pre>
<p><br/>Under Ubuntu</p>
<p>/usr/local/lib/python3.8/dist-packages/robolink/robolink.py</p>
<p>and</p>
<p>/usr/local/lib/python3.8/dist-packages/robodk/robodk.py</p>
<p>replaced with the newest source codes of <a href="https://github.com/RoboDK/RoboDK-API/tree/master/Python">https://github.com/RoboDK/RoboDK-API/tree/master/Python</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *
from robodk import *

import os

dir_path = os.path.dirname(os.path.realpath(__file__))
print(dir_path)
# Calculate pyramid coordinate

def pyramid_calc(BALLS_SIDE=4):
    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""
    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)
    BALL_DIAMETER = 100
    xyz_list = []
    sqrt2 = 2**(0.5)
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE-h):
            for j in range(BALLS_SIDE-h):
                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2
                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]
    return xyz_list
    

# Make a list of positions to place the objects
balls_list = pyramid_calc(4)

#print(len(frame1_list))
# 4*4 = 16
# 3*3 = 9
# 2*2 = 4
# 1+4+9+16 = 30

# height 50*sqrt(2)
'''
[

[50.0, 50.0, 50.0], [50.0, 150.0, 50.0], [50.0, 250.0, 50.0], [50.0, 350.0, 50.0], 

[150.0, 50.0, 50.0], [150.0, 150.0, 50.0], [150.0, 250.0, 50.0], [150.0, 350.0, 50.0], 

[250.0, 50.0, 50.0], [250.0, 150.0, 50.0], [250.0, 250.0, 50.0], [250.0, 350.0, 50.0], 

[350.0, 50.0, 50.0], [350.0, 150.0, 50.0], [350.0, 250.0, 50.0], [350.0, 350.0, 50.0], 


[100.0, 100.0, 120.71067811865474], [100.0, 200.0, 120.71067811865474], [100.0, 300.0, 120.71067811865474], 

[200.0, 100.0, 120.71067811865474], [200.0, 200.0, 120.71067811865474], [200.0, 300.0, 120.71067811865474], 

[300.0, 100.0, 120.71067811865474], [300.0, 200.0, 120.71067811865474], [300.0, 300.0, 120.71067811865474], 


[150.0, 150.0, 191.42135623730948], [150.0, 250.0, 191.42135623730948], 

[250.0, 150.0, 191.42135623730948], [250.0, 250.0, 191.42135623730948], 


[200.0, 200.0, 262.13203435596427]

]

'''
# https://github.com/RoboDK/RoboDK-API/blob/master/Python/robolink.py
# robodk_path variable to specify location of RoboDK.exe
# under Ubuntu can not use "-NEWINSTANCE"
'''
start_robodk.sh content
LD_LIBRARY_PATH="/home/yen/RoboDK/bin/lib"
export LD_LIBRARY_PATH
/home/yen/RoboDK/bin/RoboDK
'''
RDK = Robolink(robodk_path="/home/yen/start_robodk.sh",args=["-SKIPINI", "-EXIT_LAST_COM"])
# Add robot and the accompanied Base coordinate
print(dir_path + '/Fanuc-M-710iC-50.robot')
# relative directory or absolute directory will work for AddFile under Ubuntu
#robot = RDK.AddFile(r"/home/yen/github/wcm2021/downloads/robodk/pick_and_place_kmol_mac/Fanuc-M-710iC-50.robot")
robot = RDK.AddFile('Fanuc-M-710iC-50.robot')
# Get the default robot base frame
robot_frame = RDK.Item('Fanuc M-710iC/50 Base')
# Move the base frame to the origin
robot_frame.setPose(transl(0,0,0))

# Add a tool to an existing robot:
tool = RDK.AddFile(dir_path + '/MainTool.tool', robot)

# Add table 1
table1_frame = RDK.AddFrame('Table 1')
table1_frame.setPose(transl(807.766544,-963.699898,41.478944))
table1_stl = RDK.AddFile(dir_path + '/Table.stl', table1_frame)

# Add table 2
table2_frame = RDK.AddFrame('Table 2')
table2_frame.setPose(transl(926.465508,337.151529,94.871928))
table2_stl = RDK.AddFile(dir_path + '/Table.stl', table2_frame)

# Add balls
# create a list with 30 elements
balls = [None for _ in range(30)]
layer = [16, 9, 4, 1]
count = 0
for i in range(len(balls_list)):
    # transl(balls_list)
    balls[i] = RDK.AddFile('./ball.stl', table2_frame)
    balls[i].setPose(transl(balls_list[i]))
    count = count + 1
    if count &lt;= 16:
        balls[i].setColor([1, 0, 0])
    elif count &gt; 16 and count &lt;= 25:
        balls[i].setColor([0, 1, 0])
    elif count &gt; 25 and count &lt;=29:
        balls[i].setColor([1, 1, 0])
    else:
        balls[i].setColor([0, 0, 1])
</pre>
<h3>Pick and Place</h3>
<h4>Use RoboDK Python API create Pick and Place simulation:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *
from robodk import *

import os

dir_path = os.path.dirname(os.path.realpath(__file__))
print(dir_path)
# Calculate pyramid coordinate

# Setup global parameters
BALL_DIAMETER = 100 # diameter of one ball
APPROACH = 100      # approach distance to grab each part, in mm
nTCPs = 6           # number of TCP's in the tool

def pyramid_calc(BALLS_SIDE=4):
    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""
    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)
    #BALL_DIAMETER = 100
    xyz_list = []
    sqrt2 = 2**(0.5)
    for h in range(BALLS_SIDE):
        for i in range(BALLS_SIDE-h):
            for j in range(BALLS_SIDE-h):
                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2
                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]
    return xyz_list
    
def TCP_On(toolitem, tcp_id):
    """Attach the closest object to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""
    toolitem.AttachClosest()
    toolitem.RDK().RunMessage('Set air valve %i on' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_On(%i)' % (tcp_id+1));
        
def TCP_Off(toolitem, tcp_id, itemleave=0):
    """Detaches the closest object attached to the toolitem Htool pose,
    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""
    toolitem.DetachAll(itemleave)
    toolitem.RDK().RunMessage('Set air valve %i off' % (tcp_id+1))
    toolitem.RDK().RunProgram('TCP_Off(%i)' % (tcp_id+1));

# Make a list of positions to place the objects
balls_list = pyramid_calc(4)

#print(len(frame1_list))
# 4*4 = 16
# 3*3 = 9
# 2*2 = 4
# 1+4+9+16 = 30

# height 50*sqrt(2)
'''
[

[50.0, 50.0, 50.0], [50.0, 150.0, 50.0], [50.0, 250.0, 50.0], [50.0, 350.0, 50.0], 

[150.0, 50.0, 50.0], [150.0, 150.0, 50.0], [150.0, 250.0, 50.0], [150.0, 350.0, 50.0], 

[250.0, 50.0, 50.0], [250.0, 150.0, 50.0], [250.0, 250.0, 50.0], [250.0, 350.0, 50.0], 

[350.0, 50.0, 50.0], [350.0, 150.0, 50.0], [350.0, 250.0, 50.0], [350.0, 350.0, 50.0], 


[100.0, 100.0, 120.71067811865474], [100.0, 200.0, 120.71067811865474], [100.0, 300.0, 120.71067811865474], 

[200.0, 100.0, 120.71067811865474], [200.0, 200.0, 120.71067811865474], [200.0, 300.0, 120.71067811865474], 

[300.0, 100.0, 120.71067811865474], [300.0, 200.0, 120.71067811865474], [300.0, 300.0, 120.71067811865474], 


[150.0, 150.0, 191.42135623730948], [150.0, 250.0, 191.42135623730948], 

[250.0, 150.0, 191.42135623730948], [250.0, 250.0, 191.42135623730948], 


[200.0, 200.0, 262.13203435596427]

]

'''
# https://github.com/RoboDK/RoboDK-API/blob/master/Python/robolink.py
# robodk_path variable to specify location of RoboDK.exe
# under Ubuntu can not use "-NEWINSTANCE"
'''
start_robodk.sh content
LD_LIBRARY_PATH="/home/yen/RoboDK/bin/lib"
export LD_LIBRARY_PATH
/home/yen/RoboDK/bin/RoboDK
'''
RDK = Robolink(robodk_path="/home/yen/start_robodk.sh",args=["-SKIPINI", "-EXIT_LAST_COM"])
# Add robot and the accompanied Base coordinate
print(dir_path + '/Fanuc-M-710iC-50.robot')
# relative directory or absolute directory will work for AddFile under Ubuntu
#robot = RDK.AddFile(r"/home/yen/github/wcm2021/downloads/robodk/pick_and_place_kmol_mac/Fanuc-M-710iC-50.robot")
robot = RDK.AddFile('Fanuc-M-710iC-50.robot')
# Get the default robot base frame
robot_frame = RDK.Item('Fanuc M-710iC/50 Base')
# Move the base frame to the origin
robot_frame.setPose(transl(0,0,0))

# Add a tool to an existing robot:
tool = RDK.AddFile(dir_path + '/MainTool.tool', robot)

# Add table 1
table1_frame = RDK.AddFrame('Table 1')
table1_frame.setPose(transl(807.766544,-963.699898,41.478944))
table1_stl = RDK.AddFile(dir_path + '/Table.stl', table1_frame)

# Add table 2
table2_frame = RDK.AddFrame('Table 2')
table2_frame.setPose(transl(926.465508,337.151529,94.871928))
table2_stl = RDK.AddFile(dir_path + '/Table.stl', table2_frame)
     
# Calculate tool frames for the suction cup tool of 6 suction cups
TCP_list = []
for i in range(nTCPs):
    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)
    TCPi = robot.AddTool(TCPi_pose, 'TCP %i' % (i+1))
    TCP_list.append(TCPi)

TCP_0 = TCP_list[0]

# Turn on automatic rendering
RDK.Render(True)

# Add balls
# create a list with 30 elements
balls = [None for _ in range(30)]
layer = [16, 9, 4, 1]
count = 0
for i in range(len(balls_list)):
    # transl(balls_list)
    balls[i] = RDK.AddFile('./ball.stl', table1_frame)
    balls[i].setPose(transl(balls_list[i]))
    count = count + 1
    if count &lt;= 16:
        balls[i].setColor([1, 0, 0])
    elif count &gt; 16 and count &lt;= 25:
        balls[i].setColor([0, 1, 0])
    elif count &gt; 25 and count &lt;=29:
        balls[i].setColor([1, 1, 0])
    else:
        balls[i].setColor([0, 0, 1])

# Make a list of positions to place the objects
# ball_list is the same as frame1_list
frame1_list = pyramid_calc(4)
frame2_list = pyramid_calc(4)

# Move balls 
robot.setPoseTool(TCP_list[0])
nballs_frame1 = len(frame1_list)
nballs_frame2 = len(frame2_list)
idTake = nballs_frame1 - 1
idLeave = 0
idTCP = 0

target_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)

# frame1 is the same as table1_frame
frame1 = RDK.Item('Table 1')
frame2 = RDK.Item('Table 2')

while idTake &gt;= 0:
    # ------------------------------------------------------------------
    # first priority: grab as many balls as possible
    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -&gt; nTCPs)
    ntake = min(nTCPs, idTake + 1)

    # approach to frame 1
    robot.setPoseFrame(frame1)
    robot.setPoseTool(TCP_0)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.MoveJ(target_app_frame)

    # grab ntake balls from frame1
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted
        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idTake = idTake - 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_On(TCPi, i)
        robot.MoveL(target_app)
 
    # ------------------------------------------------------------------
    # second priority: unload the tool     
    # approach to frame2 and place the tool balls into table2
    robot.setPoseTool(TCP_0)
    robot.MoveJ(target_app_frame)
    robot.MoveJ([0,0,0,0,10,-200])
    robot.setPoseFrame(frame2)    
    robot.MoveJ(target_app_frame)
    for i in range(ntake):
        TCPi = TCP_list[i]
        robot.setPoseTool(TCPi)
        if idLeave &gt; nballs_frame2-1:
            raise Exception("No room left to place objects in Table 2")

        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted
        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)
        target_app = target*transl(0,0,-APPROACH)
        idLeave = idLeave + 1        
        robot.MoveL(target_app)
        robot.MoveL(target)
        TCP_Off(TCPi, i, frame2)
        robot.MoveL(target_app)

    robot.MoveJ(target_app_frame)

# Move home when the robot finishes
robot.MoveJ([0,0,0,0,10,-200])
</pre>
<p></p>
<h2>CoppeliaSim</h2>
<h4>Educational version:</h4>
<h4>Windows:</h4>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Setup.exe">https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Setup.exe</a></p>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Win.zip">https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Win.zip</a></p>
<h4>Mac:</h4>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Mac.zip">https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Mac.zip</a></p>
<h4>Ubuntu:</h4>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz">https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz</a></p>
<h2>Arduino</h2>
<h4>UnoArduSim:</h4>
<p style="padding-left: 30px;"><a href="https://www.sites.google.com/site/unoardusim/services">https://www.sites.google.com/site/unoardusim/services</a></p>
<p style="padding-left: 30px;"><a href="/downloads/UnoArduSimV2.9.1.zip">UnoArduSimV2.9.1.zip</a></p>
<h4>Picsimlab:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/lcgamboa/picsimlab">https://github.com/lcgamboa/picsimlab</a></p>
<p></p>
<p style="padding-left: 30px;"></p>
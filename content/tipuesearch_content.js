var tipuesearch = {"pages": [{'title': 'About', 'text': '五專部專題題目: \n 網際內容管理系統在精密機械工程教學與研究上的應用 \n Application of Web-based Content Management Systems in Teaching and Research of Precision Mechanical Engineering \n 專題動機: \n 探討如何利用  Fossil SCM  虛擬與實體伺服器, 讓五專精密機械工程科相關師生, 得以透過學校配發的 @gm 帳號登入, 並在網際內容管理系統中進行知識管理與互動, 擬藉此提升課程教學與專題研究效益. \n 研究步驟: \n 從 Windows 與 Ubuntu 中編譯  Fossil SCM  套件開始, 分別取得 client 與 server 端的可執行檔案後, 將  Fossil SCM  安裝配置在一台實體或虛擬主機上, 利用 Python +  Flask  著手編寫  Oauth2  網際程式介面, 讓所有相關成員得以自建倉儲與網際內容管理系統, 之後再分門別類, 根據精密機械工程科學會的任務編組, 利用網際內容管理系統提供相關服務. \n 預計成果: \n \n 參與 eng.nfu.edu.tw 網域伺服器 (DNS) 與 G Suite 系統管理. \n 在 Ubuntu 虛擬主機上, 完成以  Fossil SCM  架設 pj5073.eng.nfu.edu.tw 精密機械工程科學會網站. \n 能讓獲得許可之相關人員, 透過 @gm 帳號登入科學會網站, 在各班對應網站上進行 Github 上同步網際內容管理維護或互動討論. \n 專題報告 pdf 檔案, 能夠在 github.com/mdecourse/pj5073 倉儲中的 pdf 分支, 以 Github Actions 流程發布. \n 專題簡報可直接在 mde.tw/pj5073/reveal/ 中發布. \n \n 組員: \n 50733105 \n 50733144 \n 50733146 \n 50733152 \n 四技部專題題目: \n 深度強化學習在行動機器人運動學上之應用 \n Application of Deep Reinforcement Learning in Kinematics of Mobile Robots \n 專題動機: \n 藉由研究  ECE470 專案 中行動機器人如何在  CoppeliaSim  場景中, 利用 Python remote API, 以機器視覺輔助完成避障與取放特定物件的專案內容, 並在  ref1  與  ref2  參考資料的引導下, 研究分析深度強化學習架構該如何在行動機器人運動學上進行應用. \n 研究步驟: \n \n 將  ECE470 專案 內容分別配置於 Windows 與 Ubuntu 環境中, 重現 Python remote API 控制場景, 完成避障與取放特定物件任務. \n 延伸 Python remote API, 改用  B0-based remote API  完成避障與取放特定物件任務. \n 延伸上述  CoppeliaSim  控制場景, 在 Ubuntu 上以  headless  啟動, 並將場景影像以  Flask  串流至 client 端瀏覽器. \n 在 Ubuntu 實體與虛擬主機上建立 pj2022.kmol.info 主機, 設法編寫轉檔程式 (主要修改 init.py, config/config 檔案設定內容), 讓自架主機上的倉儲內容能夠同時支援近端 (同步內容推送至 Github, Gitlab, Bitbucket 與 Heroku) 與  uwsgi  伺服. \n 研究如何利用機器視覺與深度強化學習 ( ref1 ,  ref2 ,  ref3 )提升避障與取放特定物件效能. \n \n 預計成果: \n \n 完成 pj2022.kmol.info 主機架設, 使用者可從瀏覽器登入行動機器人場景執行監控. \n pj2022 專題網站內容可同步至 Github Pages, Gitlab Pages, 自架  Fossil SCM  主機與 Heroku 主機. \n 專題報告 pdf 檔案, 能夠在 github.com/mdecourse/pj2022 倉儲中的 pdf 分支, 以 Github Actions 流程發布. \n 專題報告內容能直接透過 Github Actions 套用  IEEE 論文格式 進行 5-7 頁論文 Release 發布. \n 專題簡報可直接在 mde.tw/pj2022/reveal/ 中發布. \n \n 組員: \n 40823116 \n 40823131 \n 40823152 \n 40823153 \n \n 4072 專題: \n https://github.com/mdecourse/4072pj1  ( 強化學習在機電系統中之應用 ) \n https://github.com/mdecourse/4072pj2  ( 有限元素分析套件解析應用 ) \n https://github.com/mdecourse/4072pj3  ( Pyslvs-UI 平面多連桿機構套件之合成與應用 ) \n \n 工作站室虛擬主機: \n nginx: sudo /etc/init.d/nginx restart \n uwsgi: sudo systemctl restart cmsimde \n fossil scm: sudo /etc/init.d/stunnel4 restart \n 研究項目: \n \n 在實體或虛擬主機上配置 Ubuntu Desktop 操作系統, 並配置網際應用程式伺服器 \n 能夠透過程式方法建立虛擬環境中的機電資整合系統 \n 能夠透過網際與機器學習手段, 利用網路遠端監控虛擬整合機電資系統 \n \n 具體工作項目: \n \n 利用虛擬主機安裝 Ubuntu Desktop 操作系統, 並在其中配置 cmstemplate 網際內容管理系統, RoboDK, CoppeliaSim, Webots 等系統 \n 利用 Windows 10 上的 Xming, 遠端啟動 RoboDK, CoppeliaSim 與 Webots 等系統. \n 利用 Python remote API 操控網際應用程式伺服器上的 RoboDK, CoppeliaSim 與 Webots 機電整合場景 \n 利用 Python 程式根據 RoKiSim Industrial Robot 定義 (XML +STL), 將所有 Robot 系統轉入 CoppeliaSim 與 Webots 執行 Forward and Inverse Kinematic 操作 \n 利用機器視覺與學習方法在近端進行機械手臂自動化操作 \n 利用網際架構監控虛實整合機電系統 \n \n 了解  RoKiSim.7z  中有關 CAD_Robots 目錄中有關 XML 與 STL 組成 Robot 的定義, 然後根據  abbirm.simscene.xml.zip  中 CoppeliaSim XML 檔案格式, 以程式方法將所有 Robots 轉為 CoppeliaSim 場景中的 ttm 模型. 以執行 Forward and Inverse Knimatic 運動操作. \n', 'tags': '', 'url': 'About.html'}, {'title': '網際內容管理', 'text': '能夠自己架設 網際內容管理系統 所需的軟硬體與網路配置後, 再加上遠端 Github 與近端 Fossil SCM 資料同步的分散式版次管理系統整合後, 想要從事哪一類的科技研究, 應該就沒有後顧之憂了, 而且各成員大多時間都能在網路上進行協同, 只有少部分時間必須配合硬體主機的實體維護與配置操作. \n 假如將自行架設的主機以付費的主機代管或雲端主機服務取代, 則各成員皆可全時在網路上進行協同. \n 以下是與強化學習及碎片回復有關的參考資料: \n Reinforcement Learning - An Introduction.pdf \n Playing Atari with Deep Reinforcement Learning.pdf \n Reconstructing Shredded Documents.pdf \n Reconstruction of Shredded Paper Documents byFeature Matching.pdf \n Faster_Reconstruction_of_Shredded_Text_Documents_via_Self-Supervised_Deep_Asymmetric_CVPR_2020_paper.pdf \n Regenerate the Shredded Documents by using Memetic Algorithm.pdf \n', 'tags': '', 'url': '網際內容管理.html'}, {'title': '虛實整合', 'text': '透過網際內容管理主機上配置能與實體系統真實對應的模擬環境後, 使用者可以從多台裝置上的瀏覽器監控虛擬或實體機電資整合系統. \n 所需技術: \n \n 網際內容管理主機上配置虛擬環境 \n 該虛擬機電資整合環境可以透過製造流程成為實體系統 \n 虛擬環境中的場景影像可以串流至使用者網路裝置上的瀏覽器或 APPs \n 使用者可以監控虛擬或實體機電資整合系統 \n \n', 'tags': '', 'url': '虛實整合.html'}, {'title': '機器學習', 'text': '\n 機器可以透過影像裝置取得外部物件座標系統 \n 電腦可以透過該物件座標系統取放物件 \n 機電資系統可以透過強化學習完成既定工作項目 \n \n', 'tags': '', 'url': '機器學習.html'}, {'title': 'AWCMS', 'text': '五專專題題目 \n 網際內容管理系統在精密機械工程教學與研究上的應用 \n Application of Web-based Content Management Systems in Teaching and Research of Precision Mechanical Engineering \n 工作任務: \n 學習如何在 Ubuntu 20.04 配置管理  Fossil SCM \n 設法導入五專科學會相關課程教學與專題製作流程上的應用 \n 每一位成員都能夠透過 @gm 帳號登入所配置的  Fossil SCM  論壇 ( 範例 ) 進行討論 \n 每一位科學會成員都能將相關教學與專題製作流程內容納入  Fossil SCM  管理 \n 設法讓每一組專題都擁有一個線上專案系統, 可以透過網頁與版次管理系統呈現專題內容 \n 設法建立較學與研究資料配置與備份管理流程及系統 \n 設法吸引校友透過 Gmail 帳號登入五專科學會  Fossil SCM  網站, 提供教學研究與升學相關經驗與指導. \n 設法配置  https://jitsi.org/  與  OBS  及  Youtube 直播 結合, 建立校友線上 meeting 與互動系統. \n', 'tags': '', 'url': 'AWCMS.html'}, {'title': 'Fossil SCM', 'text': '在 Ubuntu 20.04 主機上安裝 Fossil SCM: \n 觀念一: Fossil SCM 的 client 與 server 在 Ubuntu 都是 fossil, 而在 Windows 則是 fossil.exe. \n sudo apt install fossil \n 在 Ubuntu 中 fossil 檔案約為 7MB. \n', 'tags': '', 'url': 'Fossil SCM.html'}, {'title': 'Win 操作', 'text': '在 Ubuntu 伺服器中建立 Fossil SCM 服務之前, 可以先透過 Windows 上的操作, 熟悉 Fossil SCM 的各項指令功能後, 再設法將配置流程轉換到 Ubuntu. \n step1: 從  https://www.fossil-scm.org/home/uv/download.html  下載最新的 fossil.exe \n step2: 從  https://www.stunnel.org/downloads.html  下載 Windows 安裝檔案後, 利用 7zip 解開壓縮後, 將 stunnel.exe 所在目錄設為可攜系統的 path 即可. \n 操作練習 1: \n 設定 stunnel/config/stunnel.conf 如下: \n [https]\n; 以 python -m http.server 8000 --bind 127.0.0.1 啟動 www server \naccept  = 127.0.0.1:443\nconnect = 127.0.0.1:8000\ncert = localhost.crt\nkey = localhost.key\nTIMEOUTclose = 0 \n localhost.crt 與 localhost.key 可以直接從  https://github.com/mdecourse/pj2022  目錄中, 將兩個檔案複製至 stunnel/config/ 目錄下即可. \n 設法好之後, 在命令列的 y:\\tmp 目錄中以: \n python -m  http.server 8000 --bind 127.0.0.1 \n 啟動 www server, 可讓使用者透過  http://localhost:8000  擷取到 y:\\tmp 目錄中的檔案. \n 接下來則利用另一個命令列執行 stunnel, 表示要以 stunnel/config/stunnel.conf 當作啟動設定檔案執行 stunnel.exe. \n 啟動 stunnel 後若顯示正常接受 connection, 則使用者可以透過  https://localhost:443  擷取到 y:\\tmp 目錄中的檔案. \n 以上的操作就是典型的 stunnel 應用, 原先以 python -m http.server 啟動的服務並沒有 https 伺服功能, 但是透過 stunnel 居中服務, 若將 accept = 設定為該電腦的外部 IP, 則外部連線可以透過 https 協定取得相關檔案或執行服務. \n 假如上述的 localhsot.crt 與 localhost.key 又是透過合法的  https://letsencrypt.org/  認證配發, 表示所使用的主機 domain name 是經過第三方所配發的數位簽章認證, 則此 server 的 https 連線就會是正式受到各 dns 伺服器接受的 https secure connections. \n 操作練習二: \n 假如將練習一中的 python -m http.server 換成 Fossil SCM 的網際服務, 則可透過 Fossil SCM 提供各種支援版本管理的網際服務. \n 進入 y:\\tmp 建立 fossil 倉儲 pj2022.fossil: \n y:\\tmp>fossil init pj2022.fossil \n 系統會列出管理 pj2022.fossil 的 username 與 password 接著修改與 username 對應的 password \n fossil user password username new_password -R pj2022.fossil \n 上述的 fossil user password 是指令名稱, 表示要執行 fossil 針對使用者更改密碼的指令, 最後的 -R pj2022.fossil 則表示此一使用者密碼的更改是針對 pj2020.fossil 倉儲檔案. 而中間的 username new_password 則替上面建立倉儲時所對應的 username, 希望透過這個指令將系統產生的密碼, 改為比較容易記住的 new_password. \n 接下來則先針對此一 pj2022.fossil 倉儲, 要以 https 的資料傳送, 在 port 9000 中伺服. \n y:\\>fossil server -P 127.0.0.1:9000 --https y:\\tmp\\pj2022.fossil \n 至於利用上述指令啟動後, 因為選擇以 --https 送出伺服資料, 因此若使用  http://localhost:9000  並無法正確連線, 必須在 stunnel https 的代理伺服下才可正常以  https://localhost  連線. \n 所以接下來要設定 stunnel, 讓 443 可以承接 Fossil SCM 從 port 9000 送出的資料. \n 將 y:\\stunnel\\config\\stunnel.conf 改為: \n [https]\n; 配合從此命令轉接資料: fossil.exe server -P 127.0.0.1:9000 --https y:\\tmp\\pj2022.fossil\naccept  = 443\nconnect = 9000\ncert = localhost.crt\nkey = localhost.key\nTIMEOUTclose = 0\n \n 並以命令列中的 stunnel 啟動 stunnel 伺服器, 假如 stunnel 並沒有載入最新更改的 stunnel.conf, 可以利用 configuration 下拉式功能表中的 reload configuration 重新讀取設定後啟動. \n 完成上列設定後, 使用者就可以從  https://localhost  看到 Fossil SCM 倉儲伺服後的網際介面. \n 操作練習三: \n 假如希望將上述在 localhost 設定的 Fossil SCM 與 Stunnel 伺服器提升為聯外服務, 則除了要將 Stunnel 中的設定 IP 以電腦的外部 IPv4 或 IPv6 位址設定外, 還必須將兩個指令設為 Windows 10 的 service, 最方便的做法為使用  https://nssm.cc/,  下載後解開壓縮檔案, 就可以利用 nssm install "服務名稱" 設定 service, 並以 nssm remove "服務名稱" 移除 service. \n 由於在 Windows 建立 Fossil SCM 網際伺服器, 必須執行 stunnel 與 fossil, 因此必須利用 nssm 建立兩個 service, 一個執行 stunnel.exe, 無需額外的設定參數, 而執行 fossil.exe 時則需要以 "server -P 127.0.0.1:9000 --https y:\\tmp\\pj2022.fossil" 作為設定參數, 只是 nssm.exe 並無法認得以 command subst 建立的 y:, 因此所有與 nssm 相關的設定, 必須直接使用 c:\\ 的路徑. \n 以上兩個 service 建立好之後, 可以透過滑鼠右鍵點擊設定後, 選擇電腦管理中的服務與應用程式, 就可以將上述兩個 service 設定為隨機器自動啟動, 如此應該就可以在 Windows 提供 Fossil SCM 的網際伺服. \n 操作練習四: \n 一旦對 Fossil SCM 在 Windows 的網際介面有所了解後, 就可以再設法綁入  https://github.com/mdecourse/fossilapp  與  https://github.com/mdecourse/fossiloauth  等兩個應用. \n 最後則必須將上列所完成的各項伺服轉移至 Ubuntu server, 以隨機器啟動的方式執行服務.', 'tags': '', 'url': 'Win 操作.html'}, {'title': 'DRLKMR', 'text': '四技專題題目 \n 深度強化學習在行動機器人運動學上之應用 \n Application of Deep Reinforcement Learning in Kinematics of Mobile Robots (DRLKMR) \n 工作任務: \n 以  MSYS2  編譯  CoppeliaSim : \n 建立可編譯  CoppeliaSim  的可攜程式環境. \n 倉儲:\xa0 https://github.com/CoppeliaRobotics \xa0 \n 由於 CoppeliaSim 4.2.0 re6 將進行 lua 程式介接的改寫, 整體架構將會與先前的版本有很大差異. \n 目前希望針對 CoppeliaSim 4.2.0 rev5 的版本執行編譯( 核心程式庫倉儲 ), 所採用的 Lua 為 5.3.5 版(可從  https://www.lua.org/ftp/  下載). 至於從  https://riverbankcomputing.com/software/qscintilla/download , 可以發現 QScintilla gpl 版本僅釋出至 2.12.2, 因此只能採用  QScintilla_gpl-2.11.2.zip . \n 先編譯  Lua , 再編譯  QScintilla_gpl-2.11.2 , 接著編譯\xa0 CoppeliaSimlib  與  coppeliasimClientAppllication \n 過程中需要 programming 目錄中的  common ,  include  與  simMath \n 取得 coppeliaSim.dll 與 coppeliaSim.exe 後再利用  Dependencies  複製所需 dll 後, 透過  MSYS2  安裝的  Qt5 plugins platforms  環境變數設定後啟動 CoppeliaSim. \n 核心程式庫 \n ClientApplication \n 從 4.2.0 rev5 下載安裝套件中取得 programming 目錄中的檔案內容, 其中最重要的是 system, platforms, models, scenes, lua, luar 等目錄. \n 編譯完成 coppeliaSim.dll, coppeliaSim.exe 後, 配合 programming 目錄內容與所需的 dll 動態連結程式庫後, CoppeliaSim 已經可以開啟, 但是若要執行 Lua scripting, 還需要  simExtGeom , 若要套用 Inverse Kinematics 則需要  simExtIK , 至於要開啟 Object 附屬的 Lua 程式編輯器, 則需要  simExtCodeEditor . \n 取得結果: \n 可編譯執行  CoppeliaSim  的可攜程式環境 \n 自行編譯的  CoppeliaSim  4.2.0 rev5 程式套件 \n 利用  vrep-env  完成冰球機在 Windows 環境的強化學習訓練 \n \n Portable compiler in Windows 64-bit operating system.  compile_copsim.7z , download file size 3.87 GB, uncompressed file size 14 GB) \n 有關 V-rep 3.1.2 的  Lua 與 C++ 編譯練習 . \n 參考資料: \n Robotic Systems:  https://motion.cs.illinois.edu/RoboticSystems/ \n Robotic assembly using Deep Reinforcement Learning \n An Introduction to Deep Reinforcement Learning  (140頁電子書) \n Tutorial: Deep Reinforcement Learning  (66 頁簡報) \n Intro to Deep Reinforcement Learning \n Deep Reinforcement Learning Fundamentals, Research and Applications \n Playing Atari with Deep Reinforcement Learning \n Deep Reinforcement Learning  (只有章節標題與程式碼) \n https://github.com/deep-reinforcement-learning-book/Chapter16-Robot-Learning-in-Simulation \n 利用 Elixir 建立自駕車 DRL \n https://github.com/marceloreichert/pwt-autonomous-car-medium', 'tags': '', 'url': 'DRLKMR.html'}, {'title': '研究方向', 'text': '參考資料: \n 2013_Techniques for Robot Navigation in Dynamic Real-World Environments.pdf \n 論文簡介時就直接列出科學上的貢獻, 已經出版的內容, 所釋出的軟體以及協同相關事項. \n 1 Introduction 1.1 Scientific Contributions 1.2 Publications 1.3 Software Releases 1.4 Collaborations 1.5 Notation 1.6 Outline \n 2021_Sample-efficient Reinforcement Learning in Robotic Table Tennis.pdf \n', 'tags': '', 'url': '研究方向.html'}, {'title': '建立可攜系統', 'text': 'Python 3.9.5  (下載 203MB, 解開壓縮 880MB) - 主要執行 Leo Editor 進行程式開發. \n Portablegit 2.31.1  (下載 58MB, 解開壓縮 272MB) - Git 工具. \n SciTE 5.0.2  (下載 1.3MB, 解開壓縮 4.3MB) - 編輯並執行 Python, TinyC, Lua 等程式. \n Lua5.4.3  (下載 635KB, 解開壓縮 2.85MB) - Lua 解譯系統. \n MSYS2 20210419  (下載 3.33GB, 解開壓縮 12GB) - 用於編譯 Qt5 C++ 程式碼. \n Boost 1.76.0  (下載 93MB, 解開壓縮 680MB) - C++ 程式庫. \n cmake 3.10.1  (下載 10.7MB, 解開壓縮 61MB) - build C++ 程式套件. \n Qscintilla 2.11.2  (下載 3.7MB, 解開壓縮 32.8MB) - editor control 程式庫. \n eigen 3.3.8  (下載 1.4MB, 解開壓縮 11.5MB) - eigenvalue 運算程式庫. \n Dependencies  (下載 2.7MB, 解開壓縮 12.4MB) - 查詢 exe 與 dll 檔案執行相依程式庫. \n start and stop batch  - 啟動關閉與設定檔案. \n', 'tags': '', 'url': '建立可攜系統.html'}, {'title': '下載可攜系統', 'text': 'start and stop batch  - 啟動關閉與設定檔案. \n', 'tags': '', 'url': '下載可攜系統.html'}, {'title': 'Legacy Console Mode', 'text': 'Old commands never die, they just fade away. \n 這裡所使用的 Batch file start_iv6.bat 與 stop.bat 只能在  https://docs.microsoft.com/en-us/windows/console/legacymode  中使用. 之後應該要設法透過可攜且跨平台的  https://github.com/PowerShell/PowerShell \xa0 編寫能夠直接從外接 USB 啟動可攜系統的啟動 scripts. \n 有關 PowerShell: \n https://docs.microsoft.com/zh-tw/powershell/ \n https://leanpub.com/powershell101 \n MSYS2 版本的選擇 \n MSYS2 各 release 版本可以從  https://github.com/msys2/msys2-installer/releases  下載. 在此使用 20210419 的版本. 主要原因是 20210604 與 20210725 釋出的版本與 20210419 有很大差異, 最大的問題在於目前只有 20210419 的版本能夠順利 build  https://github.com/zeromq/libzmq , 而 libzmq 是 CoppeliaSim BlueZero 延伸套件的核心程式庫. 所以選用 20210419 的 MSYS2 的版本. \n 理論上 MSYS2 安裝在 Windows 10 之後再取出目錄資料放入 C:\\tmp\\summer\\data 目錄後, 必須要透過 \n pacman -Syu 與 pacman -Sy 更新內容, 但是在這裡只需要從 可攜系統頁面 下載 clean 的 MSYS2 檔案即可. \n 此一可攜系統的規劃如下: \n Python 使用 Windows 10 版本 \n 操作步驟是在 Windows 安裝 Python 3.9.6 版之後, 再將 Python396 內容取出, 但是安裝時選擇不安裝 pip, 因為 pip.exe 會將安裝路徑直接寫入, 因此必須在安裝 pip 之外的內容後, 設定好隨身系統的 Python 啟動路徑後, 再以命令列 python  get-pip.py  安裝 pip.exe, 如此才能直接在可攜系統中正確利用 pip install 安裝套件. \n Lua 使用 Windows 版本 \n Lua 原始碼對於 CoppeliaSim 或 Webots 的編譯非常重要, 因為 Lua 原始碼系統非常簡潔, 可以與 C/C++ 結合, 使用者只要編譯一次 C/C++ 程式碼並轉為動態連結程式庫後, 就可以利用 Lua 解譯程式對模擬系統進行調控. \n CoppeliaSim 4.2.0 版所採用的 Lua 為 5.3.5 (可以從 這裡 下載原始碼) 與之前的 5.2 或 V-rep 時代的 Lua 5.1 版有些許出入, 因此過去場景所編寫的 Lua scripts, 可能必須經過修改才能夠在 CoppeliaSim 4.2.0 中執行. \n 利用配置好的 MSYS2 編譯 Lua 5.3.5, 可以進入 w32 目錄後執行 mingw32-make mingw. \n Git 使用 Windows 版本 \n Portablegit 可以從 這裡 下載. \n 假如存放至 Github 的檔案超過 45 MB, 建議利用  https://git-lfs.github.com/  進行配置設定, 解開 git-lfs.exe 後放入 Portablegit bin 目錄中與 git.exe 一起, 就可以直接在可攜系統中使用 git lfs 執行安裝與配置設定. \n SciTE 使用 Windows 版本 \n SciTE 可以從 這裡 下載. 也可以下載原始碼自行利用可攜系統進行編譯. \n CMake 使用 Windows 10 版本 \n Windows 10 版的 CMake 可以從這裡 下載 . 只要將 cmake.exe 路徑加入 path 搜尋就可以使用. \n gcc 使用 MinGW64 版本 \n 前面已經提過, 目前使用  20210419 的版本 , 與 Python 的方法相同, 必須先在 Windows 系統安裝後, 取出對應目錄內容, 放入 data 目錄後, 再將操作系統所安裝的版本移除. \n MSYS2 配置完成後, 必須以 pacman -S mingw-w64-x86_64-toolchain 安裝 gcc MinGW64 版後, 才可用來編譯 C/C++ 程式. \n boost 使用 MinGW64 版本 \n 以 pacman -S mingw-w64-x86_64-boost 安裝後續編譯 CoppeliaSim 所需的  Boost C++ 程式庫 . \n Qt5 使用 MinGW 版本 \n 以 pacman -Sy mingw-w64-x86_64-qt5\xa0 安裝 Qt5, 可用於編譯 CoppeliaSim 與 Webots. \n 以 pacman -Sy mingw-w64-x86_64-ffmpeg 安裝 ffmpeg, 後續可用於強化學習流程動畫製作. \n 其他相關套件安裝: \n pacman -S mingw-w64-x86_64-gnutls,  https://www.gnutls.org/ \n pacman -S mingw-w64-x86_64-libsodium,\xa0 https://doc.libsodium.org/ \n pacman -Sy mingw-w64-x86_64-doxygen,  https://www.doxygen.nl \n cmsimde 所需模組安裝: \n pip install pyopenssl flask flask_cors bs4 lxml pelican markdown leo \n start_ipv6.bat \n @echo off\nset Disk=y\nstart subst %Disk%: "data"\n\n%Disk%:\n\nset HomePath=%Disk%:\\home_ipv6\nset HomeDrive=%Disk%:\\home_ipv6\nset Home=%Disk%:\\home_ipv6\nset USERPROFILE=%Disk%:\\home_ipv6\n\nREM set Python io encoding as utf-8\nset PYTHONIOENCODING="utf-8"\n\nset PYTHONPATH=%Disk%:\\Python396\\DLLs;%Disk%:\\Python396\\Lib;^\n%Disk%:\\Python396\\Lib\\site-packages;\n\nset PYTHONHOME=%Disk%:\\Python396\n\nREM for putty\nset GIT_SSH=%Disk%:\\putty\\plink.exe\n\nREM for Java and Android SDK\nset java_home=%Disk%:\\java\\jdk8u222-b10\nset ANDROID_SDK_home=%Disk%:\\home_ipv6\nset GRADLE_USER_home=%Disk%:\\home_ipv6\nset ANDROID_SDK_ROOT=%Disk%:\\android\\sdk\nset ANDROID_Home=%Disk%:\\android\\sdk\nset REPO_OS_OVERRIDE=windows\n\nREM set Python related path\nset path_python=%Disk%:\\Python396;%Disk%:\\Python396\\Scripts;\nREM set git related path\nset path_git=%Disk%:\\portablegit_2.31.1\\bin;\nREM set for msys2 64 byte system\nset path_msys2=%Disk%:\\msys64_20210419\\mingw64\\bin;\nREM set for LaTeX\nset path_miketex=%Disk%:\\miktex-portable\\texmfs\\install\\miktex\\bin\\x64;\nREM Flutter path\nset path_flutter=%Disk%:\\flutter\\bin;%java_home%\\bin;%Disk%:\\Android\\sdk;^\n%Disk%:\\Android\\sdk\\tools;%Disk%:\\Android\\sdk\\tools\\bin;^\n%Disk%:\\Android\\sdk\\emulator;%Disk%:\\Android\\sdk\\platform-tools;^\n%Disk%:\\flutter\\bin\\cache\\dart-sdk\\bin;%Disk%:\\vscode;\n\nset path_node=%Disk%:\\node-v14.15.4-win-x64;\nset path_tcc=%Disk%:\\tmp\\tcc\\win32;\nrem set path_tcc=%Disk%:\\tcc;\nset path_heroku=%Disk%:\\heroku\\bin;\nset path_postgresql=%Disk%:\\postgresql13\\bin;\nset path_range=%Disk%:\\Range3_official\\bin;\nrem set path_range=%Disk%:\\range-3.2.5_kmol\\bin;\nset path_lua=%Disk%:\\lua-5.3.5\\;\nset path_core=%Disk%:\\coreutils-5.3.0\\bin;\nREM for gogs\nset path_putty=%Disk%:\\putty;\nset path_vscode=%Disk%:\\vscode;\n\nREM for Rust\nset MINGW_PATH=%path_msys2%;\nset GIT_PATH=%path_git%;\nset VSCODE_PATH=%path_vscode%\nset RUSTUP_HOME=%Disk%:\\Rust\\rust\nset CARGO_HOME=%Disk%:\\Rust\\cargo\nset RUST_PATH=%CARGO_HOME%\\bin\n\nREM for Erlang and Elixir\nset path_erlang=%Disk%:\\elixir\\erl10.7\\bin\\;^\n%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin;^\n%Disk%:\\elixir\\elixir\\bin;\n\nset ERTSPATH=%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin\nset ERLINI=%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin\\erl.ini\n\nREM for Haskell\nset path_haskell=%Disk%:\\ghc-9.0.1-x86_64-unknown-mingw32\\bin;\nREM for node.js\nset path_nodejs=%Disk%:\\node-v14.17.2-x64\\nodejs;^\n%Disk%:\\node-v14.17.2-x64\\nodejs\\node_modules\\npm;\n\nREM add PostgreSQL related path\n\n@SET PGDATA=%Disk%:\\postgresql13\\data\n@SET PGDATABASE=postgres\n@SET PGUSER=postgres\n@SET PGPORT=5432\n@SET PGLOCALEDIR=%Disk%:\\postgresql13\\share\\locale\n\nREM set for Range3\nREM REG IMPORT %Disk%:\\range3.reg\n\nREM proxy needed for heroku login\nREM proxy can not use with fossil scm\nREM proxy can not use with Rust installation\nREM needed for node.js\nREM set HTTP_PROXY=http://account:password@[IPV6address or domain name]:3128\nREM set HTTPS_PROXY=http://account:password@[IPV6address or domain name]:3128\n\nREM for PyRep\nset VREP_PATH=%Disk%:\\CoppeliaSimEdu_4.1.0_rev1\n\nREM BOOST_ROOT for compiling coppeliasim but maybe not for linking\nREM set BOOST_ROOT=%Disk%:\\boost_1_76_0\\;\nset path_copsim=%Disk%:\\cmake-3.21.1-windows-x86_64\\bin;^\n%Disk%:\\diffutils-2.8.7-1\\bin;%Disk%:\\patch-2.5.9-7\\bin;^\n%Disk%:\\jom_1_1_2;%Disk%:\\LLVM\\bin;%Disk%:\\QtCreator\\bin;^\n%Disk%:\\CoppeliaSimEdu;%Disk%:\\Python396\\tcl\\tcl8.6;\n\nREM set QT_QPA_PLATFORM_PLUGIN_PATH=Y:\\msys64_20210419\\mingw64\\share\\qt5\\plugins\\platforms\nREM set QT_PLUGIN_PATH=Y:\\msys64_20210419\\mingw64\\share\\qt5\\plugins\n\nREM for execute scite directly\nset path_scite=%Disk%:\\wScite511\\;\n\nREM for simExtZMQ\nset path_xsltproc=%Disk%:\\xsltproc;\nREM for simExtOMPL\nset path_sed=%Disk%:\\portablegit_2.31.1\\usr\\bin;\nREM for vs code\nset path_code=%Disk%:\\VSCode-win32-x64-1.58.2;\n\npath=%Disk%:;%path_python%;%path_git%;%path_copsim%;^\n%path_msys2%;%path_miketex%;%path_flutter%;%path_node%;^\n%path_tcc%;%path_heroku%;%path_postgresql%;%path_range%;^\n%path_lua%;%path_core%;%path_putty%;%path_vscode%;^\n%RUST_PATH%;%path_erlang%;%path_nodejs%;%path_haskell%;^\n%path_scite%;%path_xsltproc%;%path_sed%;%path_code%;%path%;\n\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\nstart /MIN %Disk%:\\wScite511\\SciTE.exe\nstart /MIN %Disk%:\\wScite511\\SciTE.exe\n\nExit\n \n stop.bat \n @echo off\nset Disk=y\npath=%PATH%;\n\nstart taskkill /IM python.exe /F\nstart taskkill /IM pythonw.exe /F\nREM stop Flutter and BlueStacks connection\nstart taskkill /IM adb.exe /F\nstart taskkill /IM scite.exe /F\nREM stop Range3\nstart taskkill /IM range.exe /F\n\nREM stop data directory and y: substitution\nstart subst %Disk%: /D\nREM stope cmd windows\nstart taskkill /IM cmd.exe /F\n\nEXIT\n \n \n', 'tags': '', 'url': 'Legacy Console Mode.html'}, {'title': 'PowerShell', 'text': '取得 USB 磁碟代號: \n 指令: volume \n volume | ? drivetype -eq removable | % driveletter \n 以磁碟代號對應特定目錄: \n 指令:  New-PSDrive \n New-PSDrive -Name y -PSProvider FileSystem -Root c:\\tmp\\portable\\data \n SSH remoting \n 插入 USB 隨身碟後自動執行 PowserShell script: \n https://stackoverflow.com/questions/21805166/start-powershell-script-when-usb-drive-is-inserted/21806438 \n Dismount USB drive: \n https://serverfault.com/questions/130887/dismount-usb-external-drive-using-powershell \n Start-Process \n 開啟命令列視窗 ( Windows command shell  指令列表) \n Start-Process "cmd" \n Examples: \n https://github.com/sushihangover/SushiHangover-PowerShell \n https://superuser.com/questions/219401/starting-scheduled-task-by-detecting-connection-of-usb-device \n 以下可攜系統主要用於  CoppeliaSim  編譯用,  Boost C++  程式庫以  MSYS2  為主. \n CoppeliaSim  原始碼:  https://github.com/CoppeliaRobotics \n 下載可攜程式系統: \n compile_copsim_for_pj2022.7z  (download file size 4 GB, uncompressed file size 14 GB) \n', 'tags': '', 'url': 'PowerShell.html'}, {'title': 'IK', 'text': 'two-link IK: \n https://www.mathworks.com/help/symbolic/derive-and-apply-inverse-kinematics-to-robot-arm.html \n https://motion.cs.illinois.edu/RoboticSystems/InverseKinematics.html \n 6 DOF symbolic IK: \n https://www.researchgate.net/publication/231890363_Inverse_kinematics_of_six-degree_of_freedom_general_and_special_manipulators_using_symbolic_computation \n 1993_Inverse kinematics of six-degree of freedom general and special manipulators using symbolic computation.pdf \n IKFast: \n https://github.com/mdecourse/ikfastpy   \n IKBT: \n 2019_IKBT_Solving Symbolic Inverse Kinematics with Behavior Tree.pdf \n https://www.semanticscholar.org/paper/IKBT%3A-Solving-Symbolic-Inverse-Kinematics-with-Tree-Zhang-Hannaford/54b5405e6f40e5dda7458a9be4094ef738aa6045 \n https://github.com/mdecourse/IKBT \n Research topic: \n add  IKBT  into  https://github.com/KmolYuan/Pyslvs-UI \n take meArm robot as example: \n https://mde.tw/cad2021/content/Task%201.html \n https://mde.tw/cad2021_hw/content/HW1.html \n convert  https://www.cs.cmu.edu/~cga/kdc-06/lecture-2d-kd/  matlab into Python. \n https://github.com/mdecourse/open-dobot-gui', 'tags': '', 'url': 'IK.html'}, {'title': 'pj2022', 'text': 'http://mally.stanford.edu/~sr/computing/basic-unix.html \n 這台主機是採用 Ubuntu 20.04 Desktop 最小安裝後, 配置 CMSiMDE 動態網站在 uwsgi + nginx 的 https www server 的環境中啟動, 而靜態網頁則直接配置於 http nginx server. \n 之後為了讓使用者可以遠端 ssh 至主機, 另外安裝 openssh-server. \n Fossil SCM 則透過 stunnel 提供的 https 進行 port 5443 的 serving. 但目前上述動態與靜態 CMSiMDE 並未與近端 Fossil SCM 及遠端 Github 倉儲進行同步整合. \n 由於這台主機具備桌面系統, 因此使用者可以透過  https://sourceforge.net/projects/xming/  以 X-windows 取得在server 執行的程式畫面, 其中包括  RoboDK  與  CoppeliaSim . \n 上述配置可以搭配: \n https://ctmakro.github.io/site/on_learning/rl/vrep.html \n https://medium.com/pytorch/robotic-assembly-using-deep-reinforcement-learning-dfd9916c5ad7 \n https://github.com/stepjam/PyRep \n 進行機電整合系統的機器學習研究. \n Change init.py title to "Pj5073", need to use "sudo systemctl restart cmsimde" to make it work.', 'tags': '', 'url': 'pj2022.html'}, {'title': 'upgrade', 'text': 'sudo apt update \n sudo apt upgrade \n sudo apt dist-upgrade \n sudo do-release-upgrade \n /etc/update-manager/release-upgrades file \n Prompt=lts or normal \n 因為 Range3 無法在 Ubuntu 20.04 項下的 libqt5core5a 程式庫版本中執行 5.12, 必須升級為 Ubuntu 21.04 才可以安裝 5.15 以上的 libqt5core5a. \n 2021.05.16 16:59 正在升級為 Ubuntu 21.04 過程中. \n', 'tags': '', 'url': 'upgrade.html'}, {'title': '強化學習', 'text': 'Pytorch: \n Pytorch Tutorial.pdf \n Pytorch_Tutorial_1.pdf \n Introduction_to_DL_with_PyTorch.pdf \n PyTorch- An Imperative Style High-PerformanceDeep Learning Library.pdf \n Deep Learning with Pytorch.pdf \n Pytorch Recipes  (校園網路中下載) \n https://github.com/thu-ml/tianshou  (天授 Pytorch Deep Reinforcement Learning Library) \n Reinforcement Learning: \n Reinforce Learning - An Introduction.pdf \n A Reinforcement Learning Approach to View Planning forAutomated Inspection Tasks.pdf \n https://github.com/jhu-lcsr/good_robot  (Efficient Reinforcement Learning for Multi-Step Visual Tasks with Sim to Real Transfer) \n Deep Reinforcement Learning \n Introduction to Deep Reinforcement Learning0.pdf \n Tutorial of Deep Reinforcement Learning.pdf \n An Introduction to Deep Reinforcement Learning.pdf \n An Introduction To Deep Reinforcement Learning2.pdf \n An Introduction to Deep Reinforcement Learning3.pdf \n Deep Reinforcement Learning with InteractiveFeedback in a Human–Robot Environment.pdf \n A Collision Avoidance Method Based on DeepReinforcement Learning.pdf \n Experimental investigations of a highlymaneuverable mobile omniwheel robot.pdf \n Deep reinforcement learning for robotic manipulation with asynchronous off-policy updates  (在校園網路中下載) \n Deep Reinforcement Learning  (校園網路中下載) \n https://github.com/deep-reinforcement-learning-book \n Pyrep: \n https://github.com/stepjam/PyRep \n https://github.com/deep-reinforcement-learning-book/Chapter16-Robot-Learning-in-Simulation \n https://github.com/chauby/V-REP-YouBot-Demo \n https://github.com/Souphis/gym-vrep \n A Big CAD model dataset: \n https://archive.nyu.edu/handle/2451/43778 \n', 'tags': '', 'url': '強化學習.html'}, {'title': '相關技術', 'text': 'Learning Kinematic Feasibility through Reinforcement Learning \n Learning Kinematic Feasibility for MobileManipulation through Deep Reinforcement Learning.pdf \n https://github.com/robot-learning-freiburg/kinematic-feasibility-rl \n https://rl.uni-freiburg.de/demos-datasets-software \n Fundamentals of Manipulator Calibration:  https://core.ac.uk/download/pdf/36732657.pdf \n', 'tags': '', 'url': '相關技術.html'}, {'title': 'X Window', 'text': '在 Windows 10 中可以使用  Xming  X server. 其目的在讓遠端的伺服器執行 GUI 程式時, 能將圖型介面傳送至 X server. \n 利用  Xming  帶出 pj5073.kmol.info 上所執行的程式 GUI 畫面流程: \n \n 設定以 putty.exe 對 pj5073.kmol.info ssh 連線 \n 連線 session 之 SSH -> Auth ->X11 勾選 enable X11 Forwarding, 並將 X Display location 設為 localhost:0.0, 表示要將程式執行的畫面傳回 X server. \n ssh  user_account@pj5073.kmol.info  連線後, 以 xterm& 背景執行 xterm. \n 接著以 nautilus& 背景執行 Ubuntu 的 GUI 檔案瀏覽器. \n \n', 'tags': '', 'url': 'X Window.html'}, {'title': 'RoboDK', 'text': 'Windows 64 位元: \n https://robodk.com/downloads/Install-RoboDK-64-v5.2.3.exe \n Mac 64 位元: \n https://robodk.com/downloads/Install-RoboDK.dmg \n Ubuntu 64 位元: \n https://robodk.com/downloads/Install-RoboDK.tar.gz \n Raspberry Pi: \n https://robodk.com/downloads/Install-RoboDK-Pi.tar.gz \n Android: \n https://play.google.com/store/apps/details?id=org.robodk.app.sharex \n iPhone: \n https://apps.apple.com/lc/app/robodk/id1485169308 \n', 'tags': '', 'url': 'RoboDK.html'}, {'title': 'RoboDK API', 'text': 'get CWD: \n import os\n\n# Get the current working directory\n\nCWD = os.path.dirname(os.path.realpath(__file__)) \n Under Ubuntu \n /usr/local/lib/python3.8/dist-packages/robolink/robolink.py \n and \n /usr/local/lib/python3.8/dist-packages/robodk/robodk.py \n replaced with the newest source codes of  https://github.com/RoboDK/RoboDK-API/tree/master/Python \n from robolink import *\nfrom robodk import *\n\nimport os\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n# Calculate pyramid coordinate\n\ndef pyramid_calc(BALLS_SIDE=4):\n    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""\n    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)\n    BALL_DIAMETER = 100\n    xyz_list = []\n    sqrt2 = 2**(0.5)\n    for h in range(BALLS_SIDE):\n        for i in range(BALLS_SIDE-h):\n            for j in range(BALLS_SIDE-h):\n                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2\n                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]\n    return xyz_list\n    \n\n# Make a list of positions to place the objects\nballs_list = pyramid_calc(4)\n\n#print(len(frame1_list))\n# 4*4 = 16\n# 3*3 = 9\n# 2*2 = 4\n# 1+4+9+16 = 30\n\n# height 50*sqrt(2)\n\'\'\'\n[\n\n[50.0, 50.0, 50.0], [50.0, 150.0, 50.0], [50.0, 250.0, 50.0], [50.0, 350.0, 50.0], \n\n[150.0, 50.0, 50.0], [150.0, 150.0, 50.0], [150.0, 250.0, 50.0], [150.0, 350.0, 50.0], \n\n[250.0, 50.0, 50.0], [250.0, 150.0, 50.0], [250.0, 250.0, 50.0], [250.0, 350.0, 50.0], \n\n[350.0, 50.0, 50.0], [350.0, 150.0, 50.0], [350.0, 250.0, 50.0], [350.0, 350.0, 50.0], \n\n\n[100.0, 100.0, 120.71067811865474], [100.0, 200.0, 120.71067811865474], [100.0, 300.0, 120.71067811865474], \n\n[200.0, 100.0, 120.71067811865474], [200.0, 200.0, 120.71067811865474], [200.0, 300.0, 120.71067811865474], \n\n[300.0, 100.0, 120.71067811865474], [300.0, 200.0, 120.71067811865474], [300.0, 300.0, 120.71067811865474], \n\n\n[150.0, 150.0, 191.42135623730948], [150.0, 250.0, 191.42135623730948], \n\n[250.0, 150.0, 191.42135623730948], [250.0, 250.0, 191.42135623730948], \n\n\n[200.0, 200.0, 262.13203435596427]\n\n]\n\n\'\'\'\n# https://github.com/RoboDK/RoboDK-API/blob/master/Python/robolink.py\n# robodk_path variable to specify location of RoboDK.exe\n# under Ubuntu can not use "-NEWINSTANCE"\n\'\'\'\nstart_robodk.sh content\nLD_LIBRARY_PATH="/home/yen/RoboDK/bin/lib"\nexport LD_LIBRARY_PATH\n/home/yen/RoboDK/bin/RoboDK\n\'\'\'\nRDK = Robolink(robodk_path="/home/yen/start_robodk.sh",args=["-SKIPINI", "-EXIT_LAST_COM"])\n# Add robot and the accompanied Base coordinate\nprint(dir_path + \'/Fanuc-M-710iC-50.robot\')\n# relative directory or absolute directory will work for AddFile under Ubuntu\n#robot = RDK.AddFile(r"/home/yen/github/wcm2021/downloads/robodk/pick_and_place_kmol_mac/Fanuc-M-710iC-50.robot")\nrobot = RDK.AddFile(\'Fanuc-M-710iC-50.robot\')\n# Get the default robot base frame\nrobot_frame = RDK.Item(\'Fanuc M-710iC/50 Base\')\n# Move the base frame to the origin\nrobot_frame.setPose(transl(0,0,0))\n\n# Add a tool to an existing robot:\ntool = RDK.AddFile(dir_path + \'/MainTool.tool\', robot)\n\n# Add table 1\ntable1_frame = RDK.AddFrame(\'Table 1\')\ntable1_frame.setPose(transl(807.766544,-963.699898,41.478944))\ntable1_stl = RDK.AddFile(dir_path + \'/Table.stl\', table1_frame)\n\n# Add table 2\ntable2_frame = RDK.AddFrame(\'Table 2\')\ntable2_frame.setPose(transl(926.465508,337.151529,94.871928))\ntable2_stl = RDK.AddFile(dir_path + \'/Table.stl\', table2_frame)\n\n# Add balls\n# create a list with 30 elements\nballs = [None for _ in range(30)]\nlayer = [16, 9, 4, 1]\ncount = 0\nfor i in range(len(balls_list)):\n    # transl(balls_list)\n    balls[i] = RDK.AddFile(\'./ball.stl\', table2_frame)\n    balls[i].setPose(transl(balls_list[i]))\n    count = count + 1\n    if count <= 16:\n        balls[i].setColor([1, 0, 0])\n    elif count > 16 and count <= 25:\n        balls[i].setColor([0, 1, 0])\n    elif count > 25 and count <=29:\n        balls[i].setColor([1, 1, 0])\n    else:\n        balls[i].setColor([0, 0, 1])\n \n', 'tags': '', 'url': 'RoboDK API.html'}, {'title': 'Pick and Place', 'text': 'Use RoboDK Python API create Pick and Place simulation: \n from robolink import *\nfrom robodk import *\n\nimport os\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nprint(dir_path)\n# Calculate pyramid coordinate\n\n# Setup global parameters\nBALL_DIAMETER = 100 # diameter of one ball\nAPPROACH = 100      # approach distance to grab each part, in mm\nnTCPs = 6           # number of TCP\'s in the tool\n\ndef pyramid_calc(BALLS_SIDE=4):\n    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""\n    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)\n    #BALL_DIAMETER = 100\n    xyz_list = []\n    sqrt2 = 2**(0.5)\n    for h in range(BALLS_SIDE):\n        for i in range(BALLS_SIDE-h):\n            for j in range(BALLS_SIDE-h):\n                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2\n                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]\n    return xyz_list\n    \ndef TCP_On(toolitem, tcp_id):\n    """Attach the closest object to the toolitem Htool pose,\n    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""\n    toolitem.AttachClosest()\n    toolitem.RDK().RunMessage(\'Set air valve %i on\' % (tcp_id+1))\n    toolitem.RDK().RunProgram(\'TCP_On(%i)\' % (tcp_id+1));\n        \ndef TCP_Off(toolitem, tcp_id, itemleave=0):\n    """Detaches the closest object attached to the toolitem Htool pose,\n    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""\n    toolitem.DetachAll(itemleave)\n    toolitem.RDK().RunMessage(\'Set air valve %i off\' % (tcp_id+1))\n    toolitem.RDK().RunProgram(\'TCP_Off(%i)\' % (tcp_id+1));\n\n# Make a list of positions to place the objects\nballs_list = pyramid_calc(4)\n\n#print(len(frame1_list))\n# 4*4 = 16\n# 3*3 = 9\n# 2*2 = 4\n# 1+4+9+16 = 30\n\n# height 50*sqrt(2)\n\'\'\'\n[\n\n[50.0, 50.0, 50.0], [50.0, 150.0, 50.0], [50.0, 250.0, 50.0], [50.0, 350.0, 50.0], \n\n[150.0, 50.0, 50.0], [150.0, 150.0, 50.0], [150.0, 250.0, 50.0], [150.0, 350.0, 50.0], \n\n[250.0, 50.0, 50.0], [250.0, 150.0, 50.0], [250.0, 250.0, 50.0], [250.0, 350.0, 50.0], \n\n[350.0, 50.0, 50.0], [350.0, 150.0, 50.0], [350.0, 250.0, 50.0], [350.0, 350.0, 50.0], \n\n\n[100.0, 100.0, 120.71067811865474], [100.0, 200.0, 120.71067811865474], [100.0, 300.0, 120.71067811865474], \n\n[200.0, 100.0, 120.71067811865474], [200.0, 200.0, 120.71067811865474], [200.0, 300.0, 120.71067811865474], \n\n[300.0, 100.0, 120.71067811865474], [300.0, 200.0, 120.71067811865474], [300.0, 300.0, 120.71067811865474], \n\n\n[150.0, 150.0, 191.42135623730948], [150.0, 250.0, 191.42135623730948], \n\n[250.0, 150.0, 191.42135623730948], [250.0, 250.0, 191.42135623730948], \n\n\n[200.0, 200.0, 262.13203435596427]\n\n]\n\n\'\'\'\n# https://github.com/RoboDK/RoboDK-API/blob/master/Python/robolink.py\n# robodk_path variable to specify location of RoboDK.exe\n# under Ubuntu can not use "-NEWINSTANCE"\n\'\'\'\nstart_robodk.sh content\nLD_LIBRARY_PATH="/home/yen/RoboDK/bin/lib"\nexport LD_LIBRARY_PATH\n/home/yen/RoboDK/bin/RoboDK\n\'\'\'\nRDK = Robolink(robodk_path="/home/yen/start_robodk.sh",args=["-SKIPINI", "-EXIT_LAST_COM"])\n# Add robot and the accompanied Base coordinate\nprint(dir_path + \'/Fanuc-M-710iC-50.robot\')\n# relative directory or absolute directory will work for AddFile under Ubuntu\n#robot = RDK.AddFile(r"/home/yen/github/wcm2021/downloads/robodk/pick_and_place_kmol_mac/Fanuc-M-710iC-50.robot")\nrobot = RDK.AddFile(\'Fanuc-M-710iC-50.robot\')\n# Get the default robot base frame\nrobot_frame = RDK.Item(\'Fanuc M-710iC/50 Base\')\n# Move the base frame to the origin\nrobot_frame.setPose(transl(0,0,0))\n\n# Add a tool to an existing robot:\ntool = RDK.AddFile(dir_path + \'/MainTool.tool\', robot)\n\n# Add table 1\ntable1_frame = RDK.AddFrame(\'Table 1\')\ntable1_frame.setPose(transl(807.766544,-963.699898,41.478944))\ntable1_stl = RDK.AddFile(dir_path + \'/Table.stl\', table1_frame)\n\n# Add table 2\ntable2_frame = RDK.AddFrame(\'Table 2\')\ntable2_frame.setPose(transl(926.465508,337.151529,94.871928))\ntable2_stl = RDK.AddFile(dir_path + \'/Table.stl\', table2_frame)\n     \n# Calculate tool frames for the suction cup tool of 6 suction cups\nTCP_list = []\nfor i in range(nTCPs):\n    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)\n    TCPi = robot.AddTool(TCPi_pose, \'TCP %i\' % (i+1))\n    TCP_list.append(TCPi)\n\nTCP_0 = TCP_list[0]\n\n# Turn on automatic rendering\nRDK.Render(True)\n\n# Add balls\n# create a list with 30 elements\nballs = [None for _ in range(30)]\nlayer = [16, 9, 4, 1]\ncount = 0\nfor i in range(len(balls_list)):\n    # transl(balls_list)\n    balls[i] = RDK.AddFile(\'./ball.stl\', table1_frame)\n    balls[i].setPose(transl(balls_list[i]))\n    count = count + 1\n    if count <= 16:\n        balls[i].setColor([1, 0, 0])\n    elif count > 16 and count <= 25:\n        balls[i].setColor([0, 1, 0])\n    elif count > 25 and count <=29:\n        balls[i].setColor([1, 1, 0])\n    else:\n        balls[i].setColor([0, 0, 1])\n\n# Make a list of positions to place the objects\n# ball_list is the same as frame1_list\nframe1_list = pyramid_calc(4)\nframe2_list = pyramid_calc(4)\n\n# Move balls \nrobot.setPoseTool(TCP_list[0])\nnballs_frame1 = len(frame1_list)\nnballs_frame2 = len(frame2_list)\nidTake = nballs_frame1 - 1\nidLeave = 0\nidTCP = 0\n\ntarget_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)\n\n# frame1 is the same as table1_frame\nframe1 = RDK.Item(\'Table 1\')\nframe2 = RDK.Item(\'Table 2\')\n\nwhile idTake >= 0:\n    # ------------------------------------------------------------------\n    # first priority: grab as many balls as possible\n    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -> nTCPs)\n    ntake = min(nTCPs, idTake + 1)\n\n    # approach to frame 1\n    robot.setPoseFrame(frame1)\n    robot.setPoseTool(TCP_0)\n    robot.MoveJ([0,0,0,0,10,-200])\n    robot.MoveJ(target_app_frame)\n\n    # grab ntake balls from frame1\n    for i in range(ntake):\n        TCPi = TCP_list[i]\n        robot.setPoseTool(TCPi)\n        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted\n        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)\n        target_app = target*transl(0,0,-APPROACH)\n        idTake = idTake - 1        \n        robot.MoveL(target_app)\n        robot.MoveL(target)\n        TCP_On(TCPi, i)\n        robot.MoveL(target_app)\n \n    # ------------------------------------------------------------------\n    # second priority: unload the tool     \n    # approach to frame2 and place the tool balls into table2\n    robot.setPoseTool(TCP_0)\n    robot.MoveJ(target_app_frame)\n    robot.MoveJ([0,0,0,0,10,-200])\n    robot.setPoseFrame(frame2)    \n    robot.MoveJ(target_app_frame)\n    for i in range(ntake):\n        TCPi = TCP_list[i]\n        robot.setPoseTool(TCPi)\n        if idLeave > nballs_frame2-1:\n            raise Exception("No room left to place objects in Table 2")\n\n        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted\n        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)\n        target_app = target*transl(0,0,-APPROACH)\n        idLeave = idLeave + 1        \n        robot.MoveL(target_app)\n        robot.MoveL(target)\n        TCP_Off(TCPi, i, frame2)\n        robot.MoveL(target_app)\n\n    robot.MoveJ(target_app_frame)\n\n# Move home when the robot finishes\nrobot.MoveJ([0,0,0,0,10,-200])\n \n \n', 'tags': '', 'url': 'Pick and Place.html'}, {'title': 'CoppeliaSim', 'text': 'Educational version: \n Windows: \n https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Setup.exe \n https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Win.zip \n Mac: \n https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Mac.zip \n Ubuntu: \n https://www.coppeliarobotics.com/files/CoppeliaSim_Edu_V4_1_0_Ubuntu20_04.tar.xz \n', 'tags': '', 'url': 'CoppeliaSim.html'}, {'title': 'Arduino', 'text': 'UnoArduSim: \n https://www.sites.google.com/site/unoardusim/services \n UnoArduSimV2.9.1.zip \n Picsimlab: \n https://github.com/lcgamboa/picsimlab \n \n', 'tags': '', 'url': 'Arduino.html'}]};